{"version":3,"sources":["/home/gus/src/node-sql-parser/webpack/bootstrap","/home/gus/src/node-sql-parser/pegjs/flinksql.pegjs","/home/gus/src/node-sql-parser/external \"big-integer\"","/home/gus/src/node-sql-parser/src/parser.single.js","/home/gus/src/node-sql-parser/src/util.js","/home/gus/src/node-sql-parser/src/window.js","/home/gus/src/node-sql-parser/src/over.js","/home/gus/src/node-sql-parser/src/binary.js","/home/gus/src/node-sql-parser/src/func.js","/home/gus/src/node-sql-parser/src/limit.js","/home/gus/src/node-sql-parser/src/with.js","/home/gus/src/node-sql-parser/src/update.js","/home/gus/src/node-sql-parser/src/insert.js","/home/gus/src/node-sql-parser/src/tables.js","/home/gus/src/node-sql-parser/src/select.js","/home/gus/src/node-sql-parser/src/show.js","/home/gus/src/node-sql-parser/src/array-struct.js","/home/gus/src/node-sql-parser/src/expr.js","/home/gus/src/node-sql-parser/src/aggregation.js","/home/gus/src/node-sql-parser/src/assign.js","/home/gus/src/node-sql-parser/src/case.js","/home/gus/src/node-sql-parser/src/column.js","/home/gus/src/node-sql-parser/src/interval.js","/home/gus/src/node-sql-parser/src/index-definition.js","/home/gus/src/node-sql-parser/src/constrain.js","/home/gus/src/node-sql-parser/src/create.js","/home/gus/src/node-sql-parser/src/alter.js","/home/gus/src/node-sql-parser/src/command.js","/home/gus/src/node-sql-parser/src/exec.js","/home/gus/src/node-sql-parser/src/union.js","/home/gus/src/node-sql-parser/src/sqlite.js","/home/gus/src/node-sql-parser/src/delete.js","/home/gus/src/node-sql-parser/src/sql.js","/home/gus/src/node-sql-parser/src/parser.js","/home/gus/src/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c7","peg$c9","peg$c11","peg$c13","head","tail","createList","peg$c20","peg$c22","peg$c24","peg$c30","peg$c32","peg$c34","peg$c36","peg$c42","peg$c44","peg$c46","peg$c48","peg$c51","peg$c53","peg$c55","peg$c69","peg$c71","peg$c73","peg$c75","peg$c78","peg$c80","peg$c82","peg$c84","peg$c90","peg$c94","peg$c97","peg$c99","peg$c101","peg$c104","peg$c106","peg$c108","peg$c111","peg$c113","peg$c115","peg$c117","peg$c119","peg$c122","peg$c124","peg$c126","peg$c128","peg$c130","peg$c132","peg$c136","peg$c140","peg$c142","peg$c144","peg$c146","peg$c149","peg$c151","peg$c153","peg$c155","peg$c160","peg$c162","peg$c165","peg$c167","peg$c170","peg$c172","peg$c174","peg$c176","peg$c178","peg$c181","peg$c184","peg$c186","peg$c188","peg$c190","peg$c193","peg$c199","peg$c201","peg$c203","peg$c205","peg$c207","peg$c209","peg$c211","peg$c213","peg$c215","peg$c218","peg$c222","peg$c224","peg$c229","peg$c244","peg$c246","peg$c248","peg$c250","peg$c257","peg$c259","peg$c262","peg$c264","peg$c266","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c294","peg$c317","createBinaryExprChain","peg$c319","peg$c326","peg$c328","peg$c330","peg$c332","peg$c334","peg$c336","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c361","peg$c363","peg$c366","peg$c368","peg$c370","peg$c373","peg$c379","reservedMap","peg$c385","peg$c386","peg$c387","peg$classExpectation","peg$c388","chars","peg$c389","peg$c390","peg$c392","peg$c393","peg$c394","peg$c398","peg$c399","peg$c400","peg$c401","peg$c402","peg$c403","peg$c405","peg$c413","peg$c421","peg$c423","peg$c425","peg$c428","peg$c434","peg$c436","peg$c438","peg$c440","peg$c442","peg$c444","peg$c446","peg$c448","peg$c450","peg$c452","peg$c454","peg$c456","peg$c458","peg$c460","peg$c462","peg$c464","peg$c466","peg$c468","peg$c470","peg$c472","peg$c474","peg$c476","peg$c493","peg$c494","peg$c495","peg$c496","peg$c498","peg$c501","peg$c504","peg$c507","peg$c510","peg$c513","peg$c516","peg$c519","peg$c522","peg$c525","peg$c528","peg$c530","peg$c531","peg$c540","peg$c544","peg$c545","peg$c546","peg$c547","peg$c548","peg$c549","peg$c550","peg$c551","peg$c554","peg$c556","peg$c558","peg$c560","peg$c562","peg$c566","peg$c569","peg$c571","peg$c573","peg$c575","peg$c577","peg$c579","peg$c581","peg$c583","peg$c585","peg$c588","peg$c590","peg$c594","peg$c597","peg$c599","peg$c601","peg$c603","peg$c606","peg$c609","peg$c612","peg$c616","peg$c618","peg$c620","peg$c622","peg$c624","peg$c626","peg$c628","peg$c630","peg$c632","peg$c634","peg$c636","peg$c638","peg$c640","peg$c642","peg$c644","peg$c646","peg$c649","peg$c652","peg$c655","peg$c658","peg$c661","peg$c665","peg$c668","peg$c671","peg$c675","peg$c678","peg$c681","peg$c684","peg$c687","peg$c690","peg$c693","peg$c696","peg$c699","peg$c702","peg$c705","peg$c708","peg$c747","peg$c750","peg$c753","peg$c755","peg$c757","peg$c759","peg$c761","peg$c763","peg$c765","peg$c768","peg$c771","peg$c774","peg$c777","peg$c780","peg$c783","peg$c786","peg$c789","peg$c792","peg$c795","peg$c798","peg$c801","peg$c804","peg$c807","peg$c810","peg$c813","peg$c816","peg$c819","peg$c822","peg$c825","peg$c828","peg$c831","peg$c834","peg$c838","peg$c841","peg$c844","peg$c847","peg$c850","peg$c853","peg$c856","peg$c859","peg$c866","peg$c872","peg$c881","peg$c884","peg$c887","peg$c890","peg$c893","peg$c896","peg$c899","peg$c902","peg$c905","peg$c908","peg$c911","peg$c913","peg$c915","peg$c917","peg$c919","peg$c921","peg$c923","peg$c926","peg$c929","peg$c933","peg$c936","peg$c941","peg$c944","peg$c947","peg$c950","peg$c953","peg$c955","peg$c957","peg$c959","peg$c961","peg$c963","peg$c965","peg$c967","peg$c969","peg$c971","peg$c973","peg$c975","peg$c977","peg$c979","peg$c981","peg$c983","peg$c985","peg$c987","peg$c989","peg$c993","peg$c994","peg$c995","peg$c1013","dataType","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsecrud_stmt","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parsetable_ref_list","a","tt","db","toLowerCase","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c59","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","s8","peg$parseLPAREN","peg$parsecreate_definition","peg$parseCOMMA","peg$parseRPAREN","peg$parsecreate_table_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","ife","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","e","parentheses","lt","like","peg$c16","peg$parsecreate_table_stmt","s18","s20","s21","s23","s25","s27","s29","peg$parseKW_CONSTRAINT","substr","peg$parseident_name","peg$parsetrigger_event","peg$parseKW_OR","peg$parsetrigger_event_list","peg$parseKW_FROM","args","kw","peg$parsetrigger_deferrable","ob","peg$parsetrigger_for_row","peg$parseKW_WHEN","peg$parseexpr","cond","peg$parsetrigger_when","peg$parseproc_func_call","kc","te","tn","fr","de","fe","tw","fct","constraint","events","deferrable","for_each","when","execute","expr","constraint_type","constraint_kw","resource","peg$parsecreate_constraint_trigger","s12","s14","s16","peg$parseliteral_string","peg$parseKW_WITH","w","v","f","extension","commonStrToLiteral","with","schema","version","peg$c12","peg$parsecreate_extension_stmt","s24","s26","s28","s30","peg$parseKW_UNIQUE","peg$parseident_start","peg$parseKW_CONCURRENTLY","peg$parseident","peg$parseindex_type","peg$parsecolumn_order","peg$parsecolumn_order_list","peg$parseindex_option","peg$parseindex_options_list","peg$parseKW_TABLESPACE","peg$parsewhere_clause","co","on","ta","um","cols","wr","ts","index_type","concurrently","index","on_kw","index_using","index_columns","with_before_where","tablespace","where","peg$parsecreate_index_stmt","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parselock_mode","k","lm","nw","tables","map","lock_mode","nowait","peg$parselock_stmt","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","peg$parsereturning_stmt","set","returning","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parsecolumn","peg$parsecolumn_list","peg$parseinsert_value_clause","ri","isArray","row","idx","values","partition","peg$c300","peg$parsereplace_insert_stmt","ig","it","prefix","filter","peg$c301","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","info","addition","peg$c291","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseselect_stmt","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseorder_by_clause","peg$parselimit_clause","_next","union","_orderby","_limit","peg$c2","peg$parseKW_NOT","peg$parseKW_EXISTS","s10","nf","peg$parsecollate_expr","peg$parseKW_ASC","peg$parseKW_DESC","collate","opclass","order","nulls","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parseconstraint_name","peg$parsecte_column_definition","peg$parseindex_options","id","definition","index_options","peg$parsecreate_constraint_primary","peg$parseKW_KEY","u","peg$parsecreate_constraint_unique","peg$parsereference_definition","reference_definition","peg$parsecreate_constraint_foreign","peg$parsecreate_constraint_definition","clc","ca","cf","re","peg$parsedata_type","peg$parseliteral_not_null","peg$parseliteral_null","peg$parsedefault_expr","df","default_val","nullable","peg$c39","peg$parsecolumn_constraint","peg$parsekeyword_comment","peg$c49","peg$parsecolumn_format","peg$parsestorage","auto_increment","unique_or_primary","comment","column_format","storage","peg$parseKW_COLLATE","peg$parseKW_DEFAULT","peg$parseliteral","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","peg$parseALTER_RENAME_TABLE","peg$parseKW_ASSIGIN_EQUAL","symbol","algorithm","lock","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","ro","peg$parse___","peg$parsereference_option","peg$parseKW_INSERT","peg$parsecolumn_ref_list","peg$c137","peg$parsecreate_option_character_set_kw","peg$parseliteral_numeric","peg$parseKW_COMMENT","peg$c182","peg$c191","peg$c194","peg$parseselect_stmt_nake","parentheses_symbol","peg$parsewith_clause","cte","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","s22","peg$parseKW_SELECT","peg$parsequery_option","opts","peg$c231","peg$parseoption_clause","peg$parseKW_DISTINCT","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","g","h","distinct","groupby","having","orderby","limit","peg$c230","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c234","peg$parsebinary_column_expr","peg$parseKW_DOUBLE_COLON","target","peg$parseDOT","tbl","peg$c236","peg$parsealias_clause","alias","peg$c237","JSON","stringify","peg$c381","peg$parsequoted_ident","peg$parsealias_ident","peg$parseKW_USING","result","peg$c253","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c255","peg$c265","peg$parsetable_base","peg$parsetable_ref","peg$parsejoin_op","using","peg$parseon_clause","peg$c270","peg$c271","peg$parsetable_join","peg$parseKW_DUAL","peg$c274","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","obj","peg$c279","peg$c281","peg$parsevar_decl","peg$parseor_and_where_expr","peg$parseKW_WHERE","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$c288","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","res","seperator","peg$c289","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c296","peg$parseKW_RETURNING","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","peg$parseKW_PARTITION","el","peg$c307","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$c309","peg$parsecase_expr","condition_list","otherwise","peg$parseKW_CASE","peg$parsecase_when_then","peg$parseKW_ELSE","peg$parsecase_else","peg$parseKW_END","peg$parseKW_THEN","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseKW_AND","len","left","createBinaryExpr","peg$c315","peg$c316","peg$parsenot_expr","peg$parsecomparison_expr","nk","peg$parseexists_op","peg$parseexists_expr","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c346","peg$parsein_op_right","peg$parseKW_BETWEEN","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","pop","tableName","peg$c338","peg$c339","peg$parseis_op_right","peg$parselike_op","peg$parselike_op_right","peg$parseOPERATOR_CONCATENATION","peg$parseDOUBLE_WELL_ARROW","peg$parseWELL_ARROW","peg$parsejsonb_op_right","peg$parsecomparison_op_right","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseaggr_func","peg$parsefunc_call","peg$parseKW_CAST","peg$c480","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c481","scale","peg$c482","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c483","peg$parsecast_expr","peg$c375","peg$parseDOUBLE_ARROW","peg$parseSINGLE_ARROW","arrows","item","properties","peg$c376","peg$c378","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c418","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_COLLECT","peg$parseKW_AGGR_FUNC","peg$parseKW_RANK","peg$parseKW_DENSE_RANK","peg$parseKW_ROW_NUMBER","peg$parseKW_AGGR_FUNC_NO_ARG","peg$c408","peg$parseKW_LISTAGG","separator","peg$c409","peg$parseaggr_fun_expr","peg$parseon_update_current_timestamp","peg$parseKW_CURRENT_TIMESTAMP","peg$c411","peg$parseover_partition","partitionby","peg$parsetrim_rem","peg$parsetrim_position","rm","peg$c426","bc","tr","peg$c429","peg$parsetrim_func_clause","peg$parseproc_func_name","over","peg$parsescalar_func","peg$c431","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$c478","peg$parseextract_func","up","peg$c432","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$c492","peg$parseliteral_datetime","peg$parseKW_NULL","peg$parseKW_NOT_NULL","peg$c490","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c534","exp","peg$c535","peg$c536","peg$parsenumber","peg$parsedigits","peg$parsedigit","digit","peg$c538","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_DOUBLE","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR__PRE_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseLANGLEBRAKE","peg$parseRANGLEBRAKE","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseLBRAKE","peg$parseproc_primary_list","peg$parseRBRAKE","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1002","peg$c1004","peg$c1009","peg$parsemem_chain","members","peg$c1012","peg$parseKW_STRING","peg$c1014","peg$parsecharacter_string_type","peg$parsenumeric_type_suffix","suffix","peg$c1017","peg$c1018","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_JSON","peg$parseKW_JSONB","peg$parsejson_type","peg$parseKW_GEOMETRY","peg$parsegeometry_type","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parsetext_type","peg$parseKW_UUID","peg$parseuuid_type","peg$parseKW_BOOL","peg$parseKW_BOOLEAN","peg$parseboolean_type","peg$parseKW_ARRAY","subType","peg$parsecollection_type","peg$parseKW_MAP","peg$parsekey_value_type","peg$parseKW_ROW","peg$parserow_type","peg$parseKW_ZEROFILL","un","ze","peg$c1015","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","keys","columnInfo","split","strOrLiteral","require","PARSER_NAME","DEFAULT_OPT","parserOpt","commonOptionConnector","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","replaceParams","params","replaceParamsInner","onPartitionsToSQL","partitions","dataTypeToSQL","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field_name","field_type","commentToSQL","triggerEventToSQL","event","eventKw","kwArgs","columnRefToSQL","returningToSQL","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","window_specification","windowFrame","window_frame_clause","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","as_window_specification","constructArgsList","consider_nulls","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","binaryToSQL","rstr","isBetween","castToSQL","expression","dataTypeSuffix","symbolChar","arrayDimension","array","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","withExprStr","setToSQL","sets","clauses","setItem","valuesToSQL","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","operatorToSQL","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","tableToSQL","unnestExpr","withOffset","with_offset","unnestToSQL","prefixStr","tablesample","table_hint","schemaStr","valueSQL","valuesExpr","tableSampleSQL","repeatable","baseTable","joinExpr","tableOptionToSQL","tableOption","selectIntoToSQL","into","position","intoType","varToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","lockingRead","locking_read","top","windowInfo","window","withInfo","distinctToSQL","columnsToSQL","intoSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","view","arrayStructValueToSQL","exprList","expr_list","arrayPath","array_path","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","distinctSQL","withinGroup","window_func","assign","leftVar","rightVal","binary_expr","case","conditions","cast","column_ref","datatype","extract","castType","fulltext_search","against","matchExpr","againstExpr","asToSQL","function","insert","unionToSQL","interval","intervalExpr","show","struct","namedWindowExprInfo","varName","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","array_index","columnOffsetToSQL","number","arrow","columnDataType","reference","onDelete","columnOrder","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","character_set","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","columnOption","asStr","getDual","star","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","createDefinition","firstAfter","first_after","ifNotExists","oldColumn","old_column","trim","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lockInfo","pgLock","execVariablesToSQL","select","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","createTriggerToSQL","withName","createExtensionToSQL","fileStream","filestream_on","include","indexColumns","indexUsing","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","withBeforeWhere","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","definer","sqlSecurity","sql_security","withClause","viewName","createViewToSQL","delete","exec","parameters","update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","fun","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"flinksql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          // => multiple_stmt | cmd_stmt | crud_stmt\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            /*\n            // is in reality: { tableList: any[]; columnList: any[]; ast: T; }\n            export type AstStatement<T> = T;\n             => AstStatement<crud_stmt[]> */\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n            \tast: cur\n            }\n          },\n      peg$c2 = function(head, tail, ob, l) {\n           /* export interface union_stmt_node extends select_stmt_node  {\n               _next: union_stmt_node;\n               union: 'union' | 'union all';\n            }\n           => AstStatement<union_stmt_node>\n           */\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][5]\n              cur.union = tail[i][3] ? 'union all' : 'union'\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c3 = \"if\",\n      peg$c4 = peg$literalExpectation(\"IF\", true),\n      peg$c5 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c6 = \"extension\",\n      peg$c7 = peg$literalExpectation(\"EXTENSION\", true),\n      peg$c8 = \"schema\",\n      peg$c9 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c10 = \"version\",\n      peg$c11 = peg$literalExpectation(\"VERSION\", true),\n      peg$c12 = function(a, e, ife, n, w, s, v, f) {\n            /*\n             export type nameOrLiteral = literal_string | { type: 'same', value: string; };\n            => {\n                type: 'create';\n                keyword: 'extension';\n                if_not_exists?: 'if not exists';\n                extension: nameOrLiteral;\n                with: 'with';\n                schema: nameOrLiteral;\n                version: nameOrLiteral;\n                from: nameOrLiteral;\n              }\n            */\n            return {\n              type: 'create',\n              keyword: e.toLowerCase(),\n              if_not_exists:ife,\n              extension: commonStrToLiteral(n),\n              with: w && w[0].toLowerCase(),\n              schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?\n              version: commonStrToLiteral(v && v[2]),\n              from: commonStrToLiteral(f && f[2]),\n            }\n          },\n      peg$c13 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c14 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists:ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c15 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            /*\n            export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;\n            export interface create_table_stmt_node_base {\n              type: 'create';\n              keyword: 'table';\n              temporary?: 'temporary';\n              if_not_exists?: 'if not exists';\n              table: table_ref_list;\n            }\n            export interface create_table_stmt_node_simple extends create_table_stmt_node_base{\n              ignore_replace?: 'ignore' | 'replace';\n              as?: 'as';\n              query_expr?: union_stmt_node;\n              create_definition?: create_table_definition;\n              table_options?: table_options;\n            }\n            => AstStatement<create_table_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c16 = function(a, tp, ife, t, lt) {\n            /*\n\n            export interface create_table_stmt_node_like extends create_table_stmt_node_base{\n              like: create_like_table;\n            }\n            => AstStatement<create_table_stmt_node>;\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c17 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {\n          /*\n          export interface create_index_stmt_node {\n            type: 'create';\n            index_type?: 'unique';\n            keyword: 'index';\n            concurrently?: 'concurrently';\n            index: string;\n            on_kw: string;\n            table: table_name;\n            index_using?: index_type;\n            index_columns: column_order[];\n            with?: index_option[];\n            with_before_where: true;\n            tablespace?: {type: 'origin'; value: string; }\n            where?: where_clause;\n          }\n          => AstStatement<create_index_stmt_node>\n          */\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                concurrently: co && co.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_using: um,\n                index_columns: cols,\n                with: wr && wr[4],\n                with_before_where: true,\n                tablespace: ts && { type: 'origin', value: ts[2] },\n                where: w,\n              }\n          }\n        },\n      peg$c18 = function(head, tail) {\n          // => column_order[]\n          return createList(head, tail)\n        },\n      peg$c19 = \"nulls\",\n      peg$c20 = peg$literalExpectation(\"NULLS\", true),\n      peg$c21 = \"first\",\n      peg$c22 = peg$literalExpectation(\"FIRST\", true),\n      peg$c23 = \"last\",\n      peg$c24 = peg$literalExpectation(\"LAST\", true),\n      peg$c25 = function(c, ca, op, o, nf) {\n          /*\n          => {\n            column: expr;\n            collate: collate_expr;\n            opclass: ident;\n            order: 'asc' | 'desc';\n            nulls: 'nulls last' | 'nulls first';\n          }\n          */\n          return {\n            column: c,\n            collate: ca,\n            opclass: op,\n            order: o && o.toLowerCase() || 'asc',\n            nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,\n          }\n        },\n      peg$c26 = function(t) {\n          // => { type: 'like'; table: table_ref_list; }\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c27 = function(e) {\n           // => create_like_table_simple & { parentheses?: boolean; }\n            e.parentheses = true;\n            return e;\n        },\n      peg$c28 = function(head, tail) {\n            // => create_definition[]\n            return createList(head, tail);\n          },\n      peg$c29 = \"auto_increment\",\n      peg$c30 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c31 = \"unique\",\n      peg$c32 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c33 = \"primary\",\n      peg$c34 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c35 = \"key\",\n      peg$c36 = peg$literalExpectation(\"KEY\", true),\n      peg$c37 = function(c, d, clc, a, u, co, ca, cf, s, re) {\n            /*\n            => {\n              column: column_ref;\n              definition: data_type;\n              nullable: column_constraint['nullable'];\n              default_val: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n              resource: 'column';\n            }\n            */\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              nullable: clc && clc.nullable,\n              default_val: clc && clc.default_val,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: Array.isArray(u) ? `${u[0].toLowerCase()} ${u[2].toLowerCase()}` : u,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c38 = function(n, df) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c39 = function(df, n) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c40 = function(ca) {\n          // => { type: 'collate'; value: ident; }\n          return {\n            type: 'collate',\n            value: ca,\n          }\n        },\n      peg$c41 = \"column_format\",\n      peg$c42 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c43 = \"fixed\",\n      peg$c44 = peg$literalExpectation(\"FIXED\", true),\n      peg$c45 = \"dynamic\",\n      peg$c46 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c47 = \"default\",\n      peg$c48 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c49 = function(k, f) {\n          // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c50 = \"storage\",\n      peg$c51 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c52 = \"disk\",\n      peg$c53 = peg$literalExpectation(\"DISK\", true),\n      peg$c54 = \"memory\",\n      peg$c55 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c56 = function(k, s) {\n          // => { type: 'storage'; value: 'disk' | 'memory' }\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c57 = function(ce) {\n          // => { type: 'default'; value: literal | expr; }\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c58 = function(a, r, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c59 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c60 = function(a, kw, t) {\n            /*\n            export interface truncate_stmt_node {\n              type: 'trucate';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<truncate_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c61 = function(d) {\n            /*\n            export interface use_stmt_node {\n              type: 'use';\n              db: ident;\n            }\n            => AstStatement<use_stmt_node>\n            */\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c62 = function(t, e) {\n            /*\n            export interface alter_table_stmt_node {\n              type: 'alter';\n              table: table_ref_list;\n              expr: alter_action_list;\n            }\n            => AstStatement<alter_table_stmt_node>\n            */\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c63 = function(head, tail) {\n            // => alter_action[]\n            return createList(head, tail);\n          },\n      peg$c64 = function(kc, cd) {\n            /*\n            => {\n              action: 'add';\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } & create_column_definition;\n            */\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c65 = function(kc, c) {\n            /* => {\n              action: 'drop';\n              collumn: column_ref;\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } */\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c66 = function(id) {\n             /* => {\n               action: 'add';\n               type: 'alter';\n               } & create_index_definition */\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c67 = function(kw, tn) {\n             /* => {\n               action: 'rename';\n               type: 'alter';\n               resource: 'table';\n               keyword?: 'to' | 'as';\n               table: ident;\n               } */\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c68 = \"algorithm\",\n      peg$c69 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c70 = \"instant\",\n      peg$c71 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c72 = \"inplace\",\n      peg$c73 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c74 = \"copy\",\n      peg$c75 = peg$literalExpectation(\"COPY\", true),\n      peg$c76 = function(s, val) {\n          /* => {\n              type: 'alter';\n              keyword: 'algorithm';\n              resource: 'algorithm';\n              symbol?: '=';\n              algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';\n            }*/\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c77 = \"lock\",\n      peg$c78 = peg$literalExpectation(\"LOCK\", true),\n      peg$c79 = \"none\",\n      peg$c80 = peg$literalExpectation(\"NONE\", true),\n      peg$c81 = \"shared\",\n      peg$c82 = peg$literalExpectation(\"SHARED\", true),\n      peg$c83 = \"exclusive\",\n      peg$c84 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c85 = function(s, val) {\n          /* => {\n            type: 'alter';\n            keyword: 'lock';\n            resource: 'lock';\n            symbol?: '=';\n            lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';\n          }*/\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c86 = function(kc, c, t, de, id) {\n             /* => {\n               index: column;\n               definition: cte_column_definition;\n               keyword: 'index' | 'key';\n               index_type?: index_type;\n               resource: 'index';\n               index_options?: index_options;\n             }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c87 = function(p, kc, c, de, id) {\n            /* => {\n                index: column;\n                definition: cte_column_definition;\n                keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';\n                index_options?: index_options;\n                resource: 'index';\n              }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c88 = function(kc, c) {\n          // => { keyword: 'constraint'; constraint: ident; }\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c89 = \"primary key\",\n      peg$c90 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c91 = function(kc, p, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'primary key';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c92 = function(kc, u, p, i, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'unique key' | 'unique' | 'unique index';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c93 = \"foreign key\",\n      peg$c94 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c95 = function(kc, p, i, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'FOREIGN KEY';\n            keyword: constraint_name['keyword'];\n            index?: column;\n            resource: 'constraint';\n            reference_definition?: reference_definition;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c96 = \"match full\",\n      peg$c97 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c98 = \"match partial\",\n      peg$c99 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c100 = \"match simple\",\n      peg$c101 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c102 = function(kc, t, de, m, od, ou) {\n          /* => {\n              definition: cte_column_definition;\n              table: table_ref_list;\n              keyword: 'references';\n              match: 'match full' | 'match partial' | 'match simple';\n              on_delete?: on_reference;\n              on_update?: on_reference;\n            }*/\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c103 = \"on\",\n      peg$c104 = peg$literalExpectation(\"ON\", true),\n      peg$c105 = \"delete\",\n      peg$c106 = peg$literalExpectation(\"DELETE\", true),\n      peg$c107 = \"update\",\n      peg$c108 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c109 = function(on_kw, kw, ro) {\n          return {\n            type: `${on_kw.toLowerCase()} ${kw.toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c110 = \"restrict\",\n      peg$c111 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c112 = \"cascade\",\n      peg$c113 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c114 = \"set null\",\n      peg$c115 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c116 = \"no action\",\n      peg$c117 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c118 = \"set default\",\n      peg$c119 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c120 = function(kc) {\n          // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'\n          return kc.toLowerCase()\n        },\n      peg$c121 = \"trigger\",\n      peg$c122 = peg$literalExpectation(\"TRIGGER\", true),\n      peg$c123 = \"before\",\n      peg$c124 = peg$literalExpectation(\"BEFORE\", true),\n      peg$c125 = \"after\",\n      peg$c126 = peg$literalExpectation(\"AFTER\", true),\n      peg$c127 = \"instead of\",\n      peg$c128 = peg$literalExpectation(\"INSTEAD OF\", true),\n      peg$c129 = \"execute\",\n      peg$c130 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c131 = \"procedure\",\n      peg$c132 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c133 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {\n          /*\n          => {\n            type: 'create';\n            constraint: string;\n            location: 'before' | 'after' | 'instead of';\n            events: trigger_event_list;\n            table: table_name;\n            from?: table_name;\n            deferrable?: trigger_deferrable;\n            for_each?: trigger_for_row;\n            when?: trigger_when;\n            execute: {\n              keyword: 'execute procedure';\n              expr: proc_func_call;\n            };\n            constraint_type: 'trigger';\n            keyword: 'trigger';\n            constraint_kw: 'constraint';\n            resource: 'constraint';\n          }\n          */\n          return {\n              type: 'create',\n              constraint: c,\n              location: p && p.toLowerCase(),\n              events: te,\n              table: tn,\n              from: fr && fr[2],\n              deferrable: de,\n              for_each: fe,\n              when: tw,\n              execute: {\n                keyword: 'execute procedure',\n                expr: fct\n              },\n              constraint_type: t && t.toLowerCase(),\n              keyword: t && t.toLowerCase(),\n              constraint_kw: kc && kc.toLowerCase(),\n              resource: 'constraint',\n            }\n        },\n      peg$c134 = function(kw) {\n          // => { keyword: 'insert' | 'delete' | 'truncate' }\n          const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()\n          return {\n            keyword,\n          }\n        },\n      peg$c135 = \"of\",\n      peg$c136 = peg$literalExpectation(\"OF\", true),\n      peg$c137 = function(kw, a) {\n          // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}\n          return {\n            keyword: kw && kw[0] && kw[0].toLowerCase(),\n            args: a && { keyword: a[0], columns: a[2] } || null\n          }\n        },\n      peg$c138 = function(head, tail) {\n          // => trigger_event[];\n          return createList(head, tail)\n        },\n      peg$c139 = \"not\",\n      peg$c140 = peg$literalExpectation(\"NOT\", true),\n      peg$c141 = \"deferrable\",\n      peg$c142 = peg$literalExpectation(\"DEFERRABLE\", true),\n      peg$c143 = \"initially immediate\",\n      peg$c144 = peg$literalExpectation(\"INITIALLY IMMEDIATE\", true),\n      peg$c145 = \"initially deferred\",\n      peg$c146 = peg$literalExpectation(\"INITIALLY DEFERRED\", true),\n      peg$c147 = function(kw, args) {\n          // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }\n          return {\n            keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',\n            args: args && args.toLowerCase(),\n          }\n        },\n      peg$c148 = \"for\",\n      peg$c149 = peg$literalExpectation(\"FOR\", true),\n      peg$c150 = \"each\",\n      peg$c151 = peg$literalExpectation(\"EACH\", true),\n      peg$c152 = \"row\",\n      peg$c153 = peg$literalExpectation(\"ROW\", true),\n      peg$c154 = \"statement\",\n      peg$c155 = peg$literalExpectation(\"STATEMENT\", true),\n      peg$c156 = function(kw, e, ob) {\n          // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }\n          return {\n            keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),\n            args: ob.toLowerCase()\n          }\n        },\n      peg$c157 = function(condition) {\n          // => { type: 'when'; cond: expr; parentheses: true; }\n          return {\n            type: 'when',\n            cond: condition,\n            parentheses: true,\n          }\n        },\n      peg$c158 = function(head, tail) {\n          // => table_option[]\n          return createList(head, tail)\n        },\n      peg$c159 = \"character\",\n      peg$c160 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c161 = \"set\",\n      peg$c162 = peg$literalExpectation(\"SET\", true),\n      peg$c163 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c164 = \"charset\",\n      peg$c165 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c166 = \"collate\",\n      peg$c167 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c168 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c169 = \"avg_row_length\",\n      peg$c170 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c171 = \"key_block_size\",\n      peg$c172 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c173 = \"max_rows\",\n      peg$c174 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c175 = \"min_rows\",\n      peg$c176 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c177 = \"stats_sample_pages\",\n      peg$c178 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c179 = function(kw, s, v) {\n          /* => {\n            keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';\n            symbol: '=';\n            value: number; // <== literal_numeric['value']\n            } */\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c180 = \"connection\",\n      peg$c181 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c182 = function(kw, s, c) {\n          // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c183 = \"compression\",\n      peg$c184 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c185 = \"'\",\n      peg$c186 = peg$literalExpectation(\"'\", false),\n      peg$c187 = \"zlib\",\n      peg$c188 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c189 = \"lz4\",\n      peg$c190 = peg$literalExpectation(\"LZ4\", true),\n      peg$c191 = function(kw, s, v) {\n          // => { keyword: 'compression'; symbol: '='; value: \"'ZLIB'\" | \"'LZ4'\" | \"'NONE'\" }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c192 = \"engine\",\n      peg$c193 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c194 = function(kw, s, c) {\n          // => { keyword: 'engine'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c195 = function(fsid) {\n             // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c196 = function(t) {\n            /*\n            export interface rename_stmt_node {\n              type: 'rename';\n              table: table_to_list;\n            }\n             => AstStatement<rename_stmt_node>\n             */\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c197 = function(kw, a) {\n            /*\n            export interface set_stmt_node {\n              type: 'set';\n              expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };\n            }\n             => AstStatement<set_stmt_node>\n             */\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c198 = \"in\",\n      peg$c199 = peg$literalExpectation(\"IN\", true),\n      peg$c200 = \"access share\",\n      peg$c201 = peg$literalExpectation(\"ACCESS SHARE\", true),\n      peg$c202 = \"row share\",\n      peg$c203 = peg$literalExpectation(\"ROW SHARE\", true),\n      peg$c204 = \"row exclusive\",\n      peg$c205 = peg$literalExpectation(\"ROW EXCLUSIVE\", true),\n      peg$c206 = \"share update exclusive\",\n      peg$c207 = peg$literalExpectation(\"SHARE UPDATE EXCLUSIVE\", true),\n      peg$c208 = \"share row exclusive\",\n      peg$c209 = peg$literalExpectation(\"SHARE ROW EXCLUSIVE\", true),\n      peg$c210 = \"access exclusive\",\n      peg$c211 = peg$literalExpectation(\"ACCESS EXCLUSIVE\", true),\n      peg$c212 = \"share\",\n      peg$c213 = peg$literalExpectation(\"SHARE\", true),\n      peg$c214 = \"mode\",\n      peg$c215 = peg$literalExpectation(\"MODE\", true),\n      peg$c216 = function(m) {\n          // => { mode: string; }\n          return {\n            mode: `in ${m.toLowerCase()} mode`\n          }\n        },\n      peg$c217 = \"nowait\",\n      peg$c218 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c219 = function(k, t, lm, nw) {\n\n            /*\n            export interface lock_stmt_node {\n              type: 'lock';\n              keyword: 'lock';\n              tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list\n              lock_mode?: lock_mode;\n              nowait?: 'NOWAIT';\n            }\n             => AstStatement<lock_stmt_node>\n             */\n\n          if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: k && k.toLowerCase(),\n              tables: t.map((table) => ({ table })),\n              lock_mode: lm,\n              nowait: nw\n            }\n          }\n        },\n      peg$c220 = function(e) {\n          /*\n          export interface call_stmt_node {\n            type: 'call';\n            expr: proc_func_call;\n          }\n             => AstStatement<call_stmt_node>\n             */\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c221 = \"(\",\n      peg$c222 = peg$literalExpectation(\"(\", false),\n      peg$c223 = \")\",\n      peg$c224 = peg$literalExpectation(\")\", false),\n      peg$c225 = function(s) {\n          /*\n          export interface select_stmt_node extends select_stmt_nake  {\n             parentheses_symbol: true;\n            }\n            => select_stmt_node\n            */\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c226 = function(head, tail) {\n            // => cte_definition[]\n            return createList(head, tail);\n          },\n      peg$c227 = function(cte) {\n            // => [cte_definition & {recursive: true; }]\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c228 = function(name, columns, stmt) {\n          // => { name: { type: 'default'; value: string; }; stmt: union_stmt; columns?: cte_column_definition; }\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt, columns };\n        },\n      peg$c229 = function(head, tail) {\n          // => column[]\n            return createList(head, tail);\n          },\n      peg$c230 = function(cte, opts, d, c, f, w, g, h, o, l) {\n            /* => {\n                with?: with_clause;\n                type: 'select';\n                options?: option_clause;\n                distinct?: 'DISTINCT';\n                columns: column_clause;\n                from?: from_clause;\n                where?: where_clause;\n                groupby?: group_by_clause;\n                having?: having_clause;\n                orderby?: order_by_clause;\n                limit?: limit_clause;\n              }*/\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l\n            };\n        },\n      peg$c231 = function(head, tail) {\n          // => query_option[]\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c232 = function(option) {\n            // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'\n            return option;\n          },\n      peg$c233 = function(head, tail) {\n            // => 'ALL' | '*' | column_list_item[]\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c234 = function(head, tail) {\n          // => column_list_item[]\n            return createList(head, tail);\n          },\n      peg$c235 = function(e, s, t) {\n          // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c236 = function(tbl) {\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n              expr: {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c237 = function(e, alias) {\n          // => { type: 'expr'; expr: expr; as?: alias_clause; }\n            return { type: 'expr', expr: e, as: alias };\n          },\n      peg$c238 = function(i) { /*=>alias_ident*/ return i; },\n      peg$c239 = function(i) { /*=>ident*/ return i; },\n      peg$c240 = function(l) { /*=>table_ref_list*/return l; },\n      peg$c241 = function(head, tail) {\n          // => table_to_item[]\n            return createList(head, tail);\n          },\n      peg$c242 = function(head, tail) {\n          // => table_name[]\n            return [head, tail]\n          },\n      peg$c243 = \"btree\",\n      peg$c244 = peg$literalExpectation(\"BTREE\", true),\n      peg$c245 = \"hash\",\n      peg$c246 = peg$literalExpectation(\"HASH\", true),\n      peg$c247 = \"gist\",\n      peg$c248 = peg$literalExpectation(\"GIST\", true),\n      peg$c249 = \"gin\",\n      peg$c250 = peg$literalExpectation(\"GIN\", true),\n      peg$c251 = function(t) {\n          // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c252 = function(head, tail) {\n          // => index_option[]\n          return createList(head, tail)\n        },\n      peg$c253 = function(head, tail) {\n          // => index_option[]\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c254 = function(k, e, kbs) {\n          // => { type: 'key_block_size'; symbol: '='; expr: number; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          }\n        },\n      peg$c255 = function(k, e, kbs) {\n          // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs\n          };\n        },\n      peg$c256 = \"with\",\n      peg$c257 = peg$literalExpectation(\"WITH\", true),\n      peg$c258 = \"parser\",\n      peg$c259 = peg$literalExpectation(\"PARSER\", true),\n      peg$c260 = function(pn) {\n          // => { type: 'with parser'; expr: ident_name }\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c261 = \"visible\",\n      peg$c262 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c263 = \"invisible\",\n      peg$c264 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c265 = function(k) {\n          // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c266 = function(head, tail) {\n            // => [table_base, ...table_ref[]]\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c267 = function(t) { /* => table_base */ return t; },\n      peg$c268 = function(t) { /* => table_join */ return t; },\n      peg$c269 = function(op, t, head, tail) {\n            // => table_base & {join: join_op; using: ident_name[]; }\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c270 = function(op, t, expr) {\n          // => table_base & {join: join_op; on?: on_clause; }\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c271 = function(op, stmt, alias, expr) {\n          /* => {\n            expr: union_stmt & { parentheses: true; };\n            as?: alias_clause;\n            join: join_op;\n            on?: on_clause;\n          }*/\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c272 = function() {\n          // => { type: 'dual' }\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c273 = function(t, alias) {\n          // => table_name & { as?: alias_clause; }\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c274 = function(stmt, alias) {\n          // => { expr: union_stmt; as?: alias_clause; }\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c275 = function() { /* => 'LEFT JOIN' */ return 'LEFT JOIN'; },\n      peg$c276 = function() { /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; },\n      peg$c277 = function() { /* => 'FULL JOIN' */ return 'FULL JOIN'; },\n      peg$c278 = function() { /* => 'INNER JOIN' */ return 'INNER JOIN'; },\n      peg$c279 = function(dt, schema, tail) {\n            // => { db?: ident; table: ident | '*'; }\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = `${dt}.${schema[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c280 = function(dt) {\n          // => IGNORE\n            tableList.add(`select::${dt}::(.*)`);\n            return {\n              db: dt,\n              table: '*'\n            }\n          },\n      peg$c281 = function(dt, tail) {\n          // => IGNORE\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c282 = function(v) {\n          // => IGNORE\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c283 = function(e) { /* => expr */ return e; },\n      peg$c284 = function(e) { /* => expr_list['value'] */ return e.value; },\n      peg$c285 = function(head, tail) {\n          // => column_ref[]\n            return createList(head, tail);\n          },\n      peg$c286 = function(l) { /* => order_by_list */ return l; },\n      peg$c287 = function(head, tail) {\n          // => order_by_element[]\n            return createList(head, tail);\n          },\n      peg$c288 = function(e, d) {\n          // => { expr: expr; type: 'ASC' | 'DESC'; }\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c289 = function(i1, tail) {\n          // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }\n            const res = []\n            if (typeof i1 === 'string') res.push({ type: 'origin', value: 'all' })\n            else res.push(i1)\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c290 = function(t, l, w, r) {\n            /* export interface update_stmt_node {\n               type: 'update';\n               table: table_ref_list;\n               set: set_list;\n               where?: where_clause;\n               returning?: returning_stmt;\n            }\n           => AstStatement<update_stmt_node>\n           */\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                returning: r,\n              }\n            };\n          },\n      peg$c291 = function(t, f, w) {\n            /*\n            export interface table_ref_addition extends table_name {\n              addition: true;\n              as?: alias_clause;\n            }\n             export interface delete_stmt_node {\n               type: 'delete';\n               table?: table_ref_list | [table_ref_addition];\n               where?: where_clause;\n            }\n           => AstStatement<delete_stmt_node>\n           */\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c292 = function(head, tail) {\n            // => set_item[]\n            return createList(head, tail);\n          },\n      peg$c293 = \"=\",\n      peg$c294 = peg$literalExpectation(\"=\", false),\n      peg$c295 = function(tbl, c, v) {\n            // => { column: ident; value: additive_expr; table?: ident;}\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c296 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c297 = function(k, c) {\n          // => { type: 'returning'; columns: column_ref_list | column_ref; }\n          return {\n            type: k && k.toLowerCase() || 'returning',\n            columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c\n          }\n        },\n      peg$c298 = function(head, tail) {\n          // => ident_name[]\n            return createList(head, tail)\n          },\n      peg$c299 = function(v) {\n          // => value_item\n          return v\n        },\n      peg$c300 = function(ri, t, p, c, v, r) {\n            /*\n             export interface replace_insert_stmt_node {\n               type: 'insert' | 'replace';\n               table?: [table_name];\n               columns: column_list;\n               values: insert_value_clause;\n               partition?: insert_partition;\n               returning?: returning_stmt;\n            }\n           => AstStatement<replace_insert_stmt_node>\n           */\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c301 = function(ri, ig, it, t, p, v, r) {\n           // => AstStatement<replace_insert_stmt_node>\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                returning: r,\n              }\n            };\n          },\n      peg$c302 = function() { /* => 'insert' */ return 'insert'; },\n      peg$c303 = function() { /* => 'replace' */return 'replace'; },\n      peg$c304 = function(l) { /* => value_list */ return l; },\n      peg$c305 = function(head, tail) {\n          // => value_item[]\n            return createList(head, tail);\n          },\n      peg$c306 = function(l) {\n          // => expr_list\n            return l;\n          },\n      peg$c307 = function(head, tail) {\n          // => { type: 'expr_list'; value: expr[] }\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c308 = function(e, u) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c309 = function(e) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: '',\n            }\n          },\n      peg$c310 = function(expr, condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr?: expr;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr || null,\n              args: condition_list\n            };\n          },\n      peg$c311 = function(condition, result) {\n          // => { type: 'when'; cond: expr; result: expr; }\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c312 = function(result) {\n          // => { type: 'else'; condition?: never; result: expr; }\n          return { type: 'else', result: result };\n        },\n      peg$c313 = function(head, tail) {\n          /*\n          export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator\n            | arithmetic_comparison_operator\n            | 'IN' | 'NOT IN'\n            | 'BETWEEN' | 'NOT BETWEEN'\n            | 'IS' | 'IS NOT'\n            | 'LIKE'\n            | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'\n          export interface binary_expr {\n            type: 'binary_expr',\n            operator: BINARY_OPERATORS,\n            left: expr,\n            right: expr\n          }\n          => binary_expr\n          */\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c314 = function(op, tail) {\n          /*\n          export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'\n          => {\n            type: 'unary_expr',\n            operator: UNARY_OPERATORS,\n            expr: expr;\n            parentheses?: boolean;\n          } */\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c315 = function(head, tail) {\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c316 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c317 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c318 = \"!\",\n      peg$c319 = peg$literalExpectation(\"!\", false),\n      peg$c320 = function(expr) {\n          // => unary_expr\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c321 = function(left, rh) {\n          // => binary_expr\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c322 = function(op, stmt) {\n          // => unary_expr\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c323 = function(nk) { /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; },\n      peg$c324 = function(l) {\n          // => { type: 'arithmetic'; tail: any }\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c325 = \">=\",\n      peg$c326 = peg$literalExpectation(\">=\", false),\n      peg$c327 = \">\",\n      peg$c328 = peg$literalExpectation(\">\", false),\n      peg$c329 = \"<=\",\n      peg$c330 = peg$literalExpectation(\"<=\", false),\n      peg$c331 = \"<>\",\n      peg$c332 = peg$literalExpectation(\"<>\", false),\n      peg$c333 = \"<\",\n      peg$c334 = peg$literalExpectation(\"<\", false),\n      peg$c335 = \"!=\",\n      peg$c336 = peg$literalExpectation(\"!=\", false),\n      peg$c337 = function(right) {\n          // => { op: 'IS'; right: additive_expr; }\n            return { op: 'IS', right: right };\n          },\n      peg$c338 = function(right) {\n          // => { type: 'origin'; value: string; }\n          const { db, table } = right.pop()\n          const tableName = table === '*' ? '*' : `\"${table}\"`\n          let tableStr = db ? `\"${db}\".${tableName}` : tableName\n          return { op: 'IS', right: {\n            type: 'origin',\n            value: `DISTINCT FROM ${tableStr}`\n          }}\n        },\n      peg$c339 = function(right) {\n            // => { type: 'IS NOT'; right: additive_expr; }\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c340 = function(op, begin, end) {\n          // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c341 = function(nk) { /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c342 = function(nk) { /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; },\n      peg$c343 = function(nk) { /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c344 = function(op, right) {\n           // => { op: like_op; right: comparison_expr}\n            return { op: op, right: right };\n          },\n      peg$c345 = function(op, l) {\n          // => {op: in_op; right: expr_list | var_decl | literal_string; }\n            return { op: op, right: l };\n          },\n      peg$c346 = function(op, e) {\n          // => IGNORE\n            return { op: op, right: e };\n          },\n      peg$c347 = \"@>\",\n      peg$c348 = peg$literalExpectation(\"@>\", false),\n      peg$c349 = \"<@\",\n      peg$c350 = peg$literalExpectation(\"<@\", false),\n      peg$c351 = \"?\",\n      peg$c352 = peg$literalExpectation(\"?\", false),\n      peg$c353 = \"?|\",\n      peg$c354 = peg$literalExpectation(\"?|\", false),\n      peg$c355 = \"?&\",\n      peg$c356 = peg$literalExpectation(\"?&\", false),\n      peg$c357 = \"#-\",\n      peg$c358 = peg$literalExpectation(\"#-\", false),\n      peg$c359 = function(s, c) {\n          // => { op: string; right: expr }\n          return {\n            op: s,\n            right: c && c.expr || c\n          }\n        },\n      peg$c360 = \"+\",\n      peg$c361 = peg$literalExpectation(\"+\", false),\n      peg$c362 = \"-\",\n      peg$c363 = peg$literalExpectation(\"-\", false),\n      peg$c364 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c365 = \"*\",\n      peg$c366 = peg$literalExpectation(\"*\", false),\n      peg$c367 = \"/\",\n      peg$c368 = peg$literalExpectation(\"/\", false),\n      peg$c369 = \"%\",\n      peg$c370 = peg$literalExpectation(\"%\", false),\n      peg$c371 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c372 = \"$\",\n      peg$c373 = peg$literalExpectation(\"$\", false),\n      peg$c374 = function(prepared_symbol, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$${n.value}`,\n          }\n        },\n      peg$c375 = function(tbl) {\n          // => IGNORE\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n            }\n          },\n      peg$c376 = function(tbl, col, a) {\n          // => IGNORE\n            const tableName = tbl && tbl[0] || null\n            columnList.add(`select::${tableName}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tableName,\n              column: col,\n              arrows: a.map(item => item[0]),\n              properties: a.map(item => item[2])\n            };\n        },\n      peg$c377 = function(tbl, col) {\n            /* => {\n              type: 'column_ref';\n              table: ident;\n              column: column | '*';\n              arrow?: '->>' | '->';\n              property?: literal_string | literal_numeric;\n            } */\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c378 = function(col) {\n          // => IGNORE\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c379 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c380 = function(name) {\n            // => indent_name\n            return name;\n          },\n      peg$c381 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c382 = function(name) {\n            // => string\n            return name;\n          },\n      peg$c383 = function(name) {\n            // => IGNORE\n            return name;\n          },\n      peg$c384 = \"\\\"\",\n      peg$c385 = peg$literalExpectation(\"\\\"\", false),\n      peg$c386 = /^[^\"]/,\n      peg$c387 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c388 = function(chars) { /* => string */ return chars.join(''); },\n      peg$c389 = /^[^']/,\n      peg$c390 = peg$classExpectation([\"'\"], true, false),\n      peg$c391 = \"`\",\n      peg$c392 = peg$literalExpectation(\"`\", false),\n      peg$c393 = /^[^`]/,\n      peg$c394 = peg$classExpectation([\"`\"], true, false),\n      peg$c395 = function(name) { /* => string */ return name; },\n      peg$c396 = function(start, parts) { /* => string */ return start + parts.join(''); },\n      peg$c397 = function(start, parts) {\n            // => string\n            return start + parts.join('');\n          },\n      peg$c398 = /^[A-Za-z_]/,\n      peg$c399 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c400 = /^[A-Za-z0-9_\\-]/,\n      peg$c401 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c402 = /^[A-Za-z0-9_]/,\n      peg$c403 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c404 = \":\",\n      peg$c405 = peg$literalExpectation(\":\", false),\n      peg$c406 = function(l) {\n          // => { type: 'param'; value: ident_name }\n            return { type: 'param', value: l[1] };\n          },\n      peg$c407 = function(name, d, e) {\n          // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr } }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e,\n                distinct: d\n              }\n            };\n          },\n      peg$c408 = function(name) {\n            return {\n              type: 'aggr_func',\n              name: name\n            };\n          },\n      peg$c409 = function(name, e, s) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e,\n                separator: s\n              }\n            };\n          },\n      peg$c410 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c411 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c412 = \"over\",\n      peg$c413 = peg$literalExpectation(\"OVER\", true),\n      peg$c414 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c415 = function(name, arg) {\n          // => { type: 'aggr_func'; name: 'COUNT'; args:count_arg; }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg\n            };\n          },\n      peg$c416 = function(e) { /* => { expr: star_expr } */ return { expr: e }; },\n      peg$c417 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c418 = function(d, c, or) { return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c419 = function() { /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; },\n      peg$c420 = \"both\",\n      peg$c421 = peg$literalExpectation(\"BOTH\", true),\n      peg$c422 = \"leading\",\n      peg$c423 = peg$literalExpectation(\"LEADING\", true),\n      peg$c424 = \"trailing\",\n      peg$c425 = peg$literalExpectation(\"TRAILING\", true),\n      peg$c426 = function(p, rm, k) {\n          // => expr_list\n          let value = []\n          if (p) value.push({type: 'origin', value: p })\n          if (rm) value.push(rm)\n          value.push({type: 'origin', value: 'from' })\n          return {\n            type: 'expr_list',\n            value,\n          }\n        },\n      peg$c427 = \"trim\",\n      peg$c428 = peg$literalExpectation(\"trim\", true),\n      peg$c429 = function(tr, s) {\n          // => { type: 'function'; name: string; args: expr_list; }\n          let args = tr || { type: 'expr_list', value: [] }\n          args.value.push(s)\n          return {\n              type: 'function',\n              name: 'TRIM',\n              args,\n          };\n        },\n      peg$c430 = function(name, l, bc) {\n            // => { type: 'function'; name: string; args: expr_list; }\n            if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc,\n            };\n          },\n      peg$c431 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c432 = function(f, up) {\n          // => { type: 'function'; name: string; over?: on_update_current_timestamp; }\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c433 = \"century\",\n      peg$c434 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c435 = \"day\",\n      peg$c436 = peg$literalExpectation(\"DAY\", true),\n      peg$c437 = \"date\",\n      peg$c438 = peg$literalExpectation(\"DATE\", true),\n      peg$c439 = \"decade\",\n      peg$c440 = peg$literalExpectation(\"DECADE\", true),\n      peg$c441 = \"dow\",\n      peg$c442 = peg$literalExpectation(\"DOW\", true),\n      peg$c443 = \"doy\",\n      peg$c444 = peg$literalExpectation(\"DOY\", true),\n      peg$c445 = \"epoch\",\n      peg$c446 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c447 = \"hour\",\n      peg$c448 = peg$literalExpectation(\"HOUR\", true),\n      peg$c449 = \"isodow\",\n      peg$c450 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c451 = \"isoyear\",\n      peg$c452 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c453 = \"microseconds\",\n      peg$c454 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c455 = \"millennium\",\n      peg$c456 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c457 = \"milliseconds\",\n      peg$c458 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c459 = \"minute\",\n      peg$c460 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c461 = \"month\",\n      peg$c462 = peg$literalExpectation(\"MONTH\", true),\n      peg$c463 = \"quarter\",\n      peg$c464 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c465 = \"second\",\n      peg$c466 = peg$literalExpectation(\"SECOND\", true),\n      peg$c467 = \"timezone\",\n      peg$c468 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c469 = \"timezone_hour\",\n      peg$c470 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c471 = \"timezone_minute\",\n      peg$c472 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c473 = \"week\",\n      peg$c474 = peg$literalExpectation(\"WEEK\", true),\n      peg$c475 = \"year\",\n      peg$c476 = peg$literalExpectation(\"YEAR\", true),\n      peg$c477 = function() {\n          // => 'string'\n          return f\n        },\n      peg$c478 = function(kw, f, t, s) {\n          // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c479 = function(e, s, t) {\n          /* => {\n              type: 'cast';\n              expr: expr | literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c480 = function(e, t) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c481 = function(e, precision) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c482 = function(e, precision, scale) {\n            // => IGNORE\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c483 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c484 = function(head, tail) {\n          // => literal[]\n            return createList(head, tail);\n          },\n      peg$c485 = function() {\n          // => { type: 'null'; value: null }\n            return { type: 'null', value: null };\n          },\n      peg$c486 = function() {\n          // => { type: 'not null'; value: 'not null' }\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c487 = function() {\n            // => { type: 'bool', value: true }\n            return { type: 'bool', value: true };\n          },\n      peg$c488 = function() {\n            //=> { type: 'bool', value: false }\n            return { type: 'bool', value: false };\n          },\n      peg$c489 = function(ca) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c490 = function(ca) {\n            // => { type: 'string'; value: string; }\n            return {\n              type: 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c491 = function(type, ca) {\n            //=> { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c492 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c493 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c494 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c495 = /^[^'\\\\]/,\n      peg$c496 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c497 = \"\\\\'\",\n      peg$c498 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c499 = function() { return \"\\\\'\";  },\n      peg$c500 = \"\\\\\\\"\",\n      peg$c501 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c502 = function() { return '\\\\\"';  },\n      peg$c503 = \"\\\\\\\\\",\n      peg$c504 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c505 = function() { return \"\\\\\\\\\"; },\n      peg$c506 = \"\\\\/\",\n      peg$c507 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c508 = function() { return \"\\\\/\";  },\n      peg$c509 = \"\\\\b\",\n      peg$c510 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c511 = function() { return \"\\b\"; },\n      peg$c512 = \"\\\\f\",\n      peg$c513 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c514 = function() { return \"\\f\"; },\n      peg$c515 = \"\\\\n\",\n      peg$c516 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c517 = function() { return \"\\n\"; },\n      peg$c518 = \"\\\\r\",\n      peg$c519 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c520 = function() { return \"\\r\"; },\n      peg$c521 = \"\\\\t\",\n      peg$c522 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c523 = function() { return \"\\t\"; },\n      peg$c524 = \"\\\\u\",\n      peg$c525 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c526 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c527 = \"\\\\\",\n      peg$c528 = peg$literalExpectation(\"\\\\\", false),\n      peg$c529 = function() { return \"\\\\\"; },\n      peg$c530 = /^[\\n\\r]/,\n      peg$c531 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c532 = function(n) {\n          // => number | { type: 'bigint'; value: string; }\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c533 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c534 = function(int_, frac) {\n          // => IGNORE\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c535 = function(int_, exp) {\n          // => IGNORE\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c536 = function(int_) {\n          // => IGNORE\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c537 = function(op, digits) { return op + digits; },\n      peg$c538 = function(op, digit) { return op + digit; },\n      peg$c539 = \".\",\n      peg$c540 = peg$literalExpectation(\".\", false),\n      peg$c541 = function(digits) { return \".\" + digits; },\n      peg$c542 = function(e, digits) { return e + digits; },\n      peg$c543 = function(digits) { return digits.join(\"\"); },\n      peg$c544 = /^[0-9]/,\n      peg$c545 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c546 = /^[0-9a-fA-F]/,\n      peg$c547 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c548 = /^[eE]/,\n      peg$c549 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c550 = /^[+\\-]/,\n      peg$c551 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c552 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c553 = \"null\",\n      peg$c554 = peg$literalExpectation(\"NULL\", true),\n      peg$c555 = \"not null\",\n      peg$c556 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c557 = \"true\",\n      peg$c558 = peg$literalExpectation(\"TRUE\", true),\n      peg$c559 = \"to\",\n      peg$c560 = peg$literalExpectation(\"TO\", true),\n      peg$c561 = \"false\",\n      peg$c562 = peg$literalExpectation(\"FALSE\", true),\n      peg$c563 = \"show\",\n      peg$c564 = peg$literalExpectation(\"SHOW\", true),\n      peg$c565 = \"drop\",\n      peg$c566 = peg$literalExpectation(\"DROP\", true),\n      peg$c567 = function() { return 'DROP'; },\n      peg$c568 = \"use\",\n      peg$c569 = peg$literalExpectation(\"USE\", true),\n      peg$c570 = \"alter\",\n      peg$c571 = peg$literalExpectation(\"ALTER\", true),\n      peg$c572 = \"select\",\n      peg$c573 = peg$literalExpectation(\"SELECT\", true),\n      peg$c574 = \"create\",\n      peg$c575 = peg$literalExpectation(\"CREATE\", true),\n      peg$c576 = \"temporary\",\n      peg$c577 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c578 = \"insert\",\n      peg$c579 = peg$literalExpectation(\"INSERT\", true),\n      peg$c580 = \"RECURSIVE\",\n      peg$c581 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c582 = \"replace\",\n      peg$c583 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c584 = \"returning\",\n      peg$c585 = peg$literalExpectation(\"RETURNING\", true),\n      peg$c586 = function() { return 'RETURNING' },\n      peg$c587 = \"rename\",\n      peg$c588 = peg$literalExpectation(\"RENAME\", true),\n      peg$c589 = \"ignore\",\n      peg$c590 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c591 = \"explain\",\n      peg$c592 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c593 = \"partition\",\n      peg$c594 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c595 = function() { return 'PARTITION' },\n      peg$c596 = \"into\",\n      peg$c597 = peg$literalExpectation(\"INTO\", true),\n      peg$c598 = \"from\",\n      peg$c599 = peg$literalExpectation(\"FROM\", true),\n      peg$c600 = \"as\",\n      peg$c601 = peg$literalExpectation(\"AS\", true),\n      peg$c602 = \"table\",\n      peg$c603 = peg$literalExpectation(\"TABLE\", true),\n      peg$c604 = function() { return 'TABLE'; },\n      peg$c605 = \"tablespace\",\n      peg$c606 = peg$literalExpectation(\"TABLESPACE\", true),\n      peg$c607 = function() { return 'TABLESPACE'; },\n      peg$c608 = \"database\",\n      peg$c609 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c610 = function() { return 'DATABASE'; },\n      peg$c611 = \"scheme\",\n      peg$c612 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c613 = function() { return 'SCHEME'; },\n      peg$c614 = function() { return 'COLLATE'; },\n      peg$c615 = \"left\",\n      peg$c616 = peg$literalExpectation(\"LEFT\", true),\n      peg$c617 = \"right\",\n      peg$c618 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c619 = \"full\",\n      peg$c620 = peg$literalExpectation(\"FULL\", true),\n      peg$c621 = \"inner\",\n      peg$c622 = peg$literalExpectation(\"INNER\", true),\n      peg$c623 = \"join\",\n      peg$c624 = peg$literalExpectation(\"JOIN\", true),\n      peg$c625 = \"outer\",\n      peg$c626 = peg$literalExpectation(\"OUTER\", true),\n      peg$c627 = \"union\",\n      peg$c628 = peg$literalExpectation(\"UNION\", true),\n      peg$c629 = \"values\",\n      peg$c630 = peg$literalExpectation(\"VALUES\", true),\n      peg$c631 = \"using\",\n      peg$c632 = peg$literalExpectation(\"USING\", true),\n      peg$c633 = \"where\",\n      peg$c634 = peg$literalExpectation(\"WHERE\", true),\n      peg$c635 = \"group\",\n      peg$c636 = peg$literalExpectation(\"GROUP\", true),\n      peg$c637 = \"by\",\n      peg$c638 = peg$literalExpectation(\"BY\", true),\n      peg$c639 = \"order\",\n      peg$c640 = peg$literalExpectation(\"ORDER\", true),\n      peg$c641 = \"having\",\n      peg$c642 = peg$literalExpectation(\"HAVING\", true),\n      peg$c643 = \"limit\",\n      peg$c644 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c645 = \"offset\",\n      peg$c646 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c647 = function() { return 'OFFSET' },\n      peg$c648 = \"asc\",\n      peg$c649 = peg$literalExpectation(\"ASC\", true),\n      peg$c650 = function() { return 'ASC'; },\n      peg$c651 = \"desc\",\n      peg$c652 = peg$literalExpectation(\"DESC\", true),\n      peg$c653 = function() { return 'DESC'; },\n      peg$c654 = \"all\",\n      peg$c655 = peg$literalExpectation(\"ALL\", true),\n      peg$c656 = function() { return 'ALL'; },\n      peg$c657 = \"distinct\",\n      peg$c658 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c659 = function() { return 'DISTINCT';},\n      peg$c660 = \"between\",\n      peg$c661 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c662 = function() { return 'BETWEEN'; },\n      peg$c663 = function() { return 'IN'; },\n      peg$c664 = \"is\",\n      peg$c665 = peg$literalExpectation(\"IS\", true),\n      peg$c666 = function() { return 'IS'; },\n      peg$c667 = \"like\",\n      peg$c668 = peg$literalExpectation(\"LIKE\", true),\n      peg$c669 = function() { return 'LIKE'; },\n      peg$c670 = \"exists\",\n      peg$c671 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c672 = function() { /* => 'EXISTS' */ return 'EXISTS'; },\n      peg$c673 = function() { return 'NOT'; },\n      peg$c674 = \"and\",\n      peg$c675 = peg$literalExpectation(\"AND\", true),\n      peg$c676 = function() { return 'AND'; },\n      peg$c677 = \"or\",\n      peg$c678 = peg$literalExpectation(\"OR\", true),\n      peg$c679 = function() { return 'OR'; },\n      peg$c680 = \"count\",\n      peg$c681 = peg$literalExpectation(\"COUNT\", true),\n      peg$c682 = function() { return 'COUNT'; },\n      peg$c683 = \"max\",\n      peg$c684 = peg$literalExpectation(\"MAX\", true),\n      peg$c685 = function() { return 'MAX'; },\n      peg$c686 = \"min\",\n      peg$c687 = peg$literalExpectation(\"MIN\", true),\n      peg$c688 = function() { return 'MIN'; },\n      peg$c689 = \"sum\",\n      peg$c690 = peg$literalExpectation(\"SUM\", true),\n      peg$c691 = function() { return 'SUM'; },\n      peg$c692 = \"avg\",\n      peg$c693 = peg$literalExpectation(\"AVG\", true),\n      peg$c694 = function() { return 'AVG'; },\n      peg$c695 = \"collect\",\n      peg$c696 = peg$literalExpectation(\"COLLECT\", true),\n      peg$c697 = function() { return 'COLLECT'; },\n      peg$c698 = \"rank\",\n      peg$c699 = peg$literalExpectation(\"RANK\", true),\n      peg$c700 = function() { return 'RANK'; },\n      peg$c701 = \"dense_rank\",\n      peg$c702 = peg$literalExpectation(\"DENSE_RANK\", true),\n      peg$c703 = function() { return 'DENSE_RANK'; },\n      peg$c704 = \"listagg\",\n      peg$c705 = peg$literalExpectation(\"LISTAGG\", true),\n      peg$c706 = function() { return 'LISTAGG'; },\n      peg$c707 = \"row_number\",\n      peg$c708 = peg$literalExpectation(\"ROW_NUMBER\", true),\n      peg$c709 = function() { return 'ROW_NUMBER'; },\n      peg$c710 = \"tumble_start\",\n      peg$c711 = peg$literalExpectation(\"TUMBLE_START\", true),\n      peg$c712 = function() { return 'TUMBLE_START'; },\n      peg$c713 = \"tumble_end\",\n      peg$c714 = peg$literalExpectation(\"TUMBLE_END\", true),\n      peg$c715 = function() { return 'TUMEBLE_END'; },\n      peg$c716 = \"hop_start\",\n      peg$c717 = peg$literalExpectation(\"HOP_START\", true),\n      peg$c718 = function() { return 'HOP_START'; },\n      peg$c719 = \"hop_end\",\n      peg$c720 = peg$literalExpectation(\"HOP_END\", true),\n      peg$c721 = function() { return 'HOP_END'; },\n      peg$c722 = \"session_start\",\n      peg$c723 = peg$literalExpectation(\"SESSION_START\", true),\n      peg$c724 = function() { return 'SESSION_START'; },\n      peg$c725 = \"session_end\",\n      peg$c726 = peg$literalExpectation(\"SESSION_END\", true),\n      peg$c727 = function() { return 'SESSION_END'; },\n      peg$c728 = \"tumble_rowtime\",\n      peg$c729 = peg$literalExpectation(\"TUMBLE_ROWTIME\", true),\n      peg$c730 = function() { return 'TUMBLE_ROWTIME'; },\n      peg$c731 = \"hop_rowtime\",\n      peg$c732 = peg$literalExpectation(\"HOP_ROWTIME\", true),\n      peg$c733 = function() { return 'HOP_ROWTIME'; },\n      peg$c734 = \"session_rowtime\",\n      peg$c735 = peg$literalExpectation(\"SESSION_ROWTIME\", true),\n      peg$c736 = function() { return 'SESSION_ROWTIME'; },\n      peg$c737 = \"tumble_proctime\",\n      peg$c738 = peg$literalExpectation(\"TUMBLE_PROCTIME\", true),\n      peg$c739 = function() { return 'TUMBLE_PROCTIME'; },\n      peg$c740 = \"hop_proctime\",\n      peg$c741 = peg$literalExpectation(\"HOP_PROCTIME\", true),\n      peg$c742 = function() { return 'HOP_PROCTIME'; },\n      peg$c743 = \"session_proctime\",\n      peg$c744 = peg$literalExpectation(\"SESSION_PROCTIME\", true),\n      peg$c745 = function() { return 'SESSION_PROCTIME'; },\n      peg$c746 = \"extract\",\n      peg$c747 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c748 = function() { return 'EXTRACT'; },\n      peg$c749 = \"call\",\n      peg$c750 = peg$literalExpectation(\"CALL\", true),\n      peg$c751 = function() { return 'CALL'; },\n      peg$c752 = \"case\",\n      peg$c753 = peg$literalExpectation(\"CASE\", true),\n      peg$c754 = \"when\",\n      peg$c755 = peg$literalExpectation(\"WHEN\", true),\n      peg$c756 = \"then\",\n      peg$c757 = peg$literalExpectation(\"THEN\", true),\n      peg$c758 = \"else\",\n      peg$c759 = peg$literalExpectation(\"ELSE\", true),\n      peg$c760 = \"end\",\n      peg$c761 = peg$literalExpectation(\"END\", true),\n      peg$c762 = \"cast\",\n      peg$c763 = peg$literalExpectation(\"CAST\", true),\n      peg$c764 = \"bool\",\n      peg$c765 = peg$literalExpectation(\"BOOL\", true),\n      peg$c766 = function() { return 'BOOL'; },\n      peg$c767 = \"boolean\",\n      peg$c768 = peg$literalExpectation(\"BOOLEAN\", true),\n      peg$c769 = function() { return 'BOOLEAN'; },\n      peg$c770 = \"char\",\n      peg$c771 = peg$literalExpectation(\"CHAR\", true),\n      peg$c772 = function() { return 'CHAR'; },\n      peg$c773 = \"varchar\",\n      peg$c774 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c775 = function() { return 'VARCHAR';},\n      peg$c776 = \"string\",\n      peg$c777 = peg$literalExpectation(\"STRING\", true),\n      peg$c778 = function() { return 'STRING';},\n      peg$c779 = \"numeric\",\n      peg$c780 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c781 = function() { return 'NUMERIC'; },\n      peg$c782 = \"decimal\",\n      peg$c783 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c784 = function() { return 'DECIMAL'; },\n      peg$c785 = \"signed\",\n      peg$c786 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c787 = function() { return 'SIGNED'; },\n      peg$c788 = \"unsigned\",\n      peg$c789 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c790 = function() { return 'UNSIGNED'; },\n      peg$c791 = \"int\",\n      peg$c792 = peg$literalExpectation(\"INT\", true),\n      peg$c793 = function() { return 'INT'; },\n      peg$c794 = \"zerofill\",\n      peg$c795 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c796 = function() { return 'ZEROFILL'; },\n      peg$c797 = \"integer\",\n      peg$c798 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c799 = function() { return 'INTEGER'; },\n      peg$c800 = \"json\",\n      peg$c801 = peg$literalExpectation(\"JSON\", true),\n      peg$c802 = function() { return 'JSON'; },\n      peg$c803 = \"jsonb\",\n      peg$c804 = peg$literalExpectation(\"JSONB\", true),\n      peg$c805 = function() { return 'JSONB'; },\n      peg$c806 = \"geometry\",\n      peg$c807 = peg$literalExpectation(\"GEOMETRY\", true),\n      peg$c808 = function() { return 'GEOMETRY'; },\n      peg$c809 = \"smallint\",\n      peg$c810 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c811 = function() { return 'SMALLINT'; },\n      peg$c812 = \"tinyint\",\n      peg$c813 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c814 = function() { return 'TINYINT'; },\n      peg$c815 = \"tinytext\",\n      peg$c816 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c817 = function() { return 'TINYTEXT'; },\n      peg$c818 = \"text\",\n      peg$c819 = peg$literalExpectation(\"TEXT\", true),\n      peg$c820 = function() { return 'TEXT'; },\n      peg$c821 = \"mediumtext\",\n      peg$c822 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c823 = function() { return 'MEDIUMTEXT'; },\n      peg$c824 = \"longtext\",\n      peg$c825 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c826 = function() { return 'LONGTEXT'; },\n      peg$c827 = \"bigint\",\n      peg$c828 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c829 = function() { return 'BIGINT'; },\n      peg$c830 = \"float\",\n      peg$c831 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c832 = function() { return 'FLOAT'; },\n      peg$c833 = \"double\",\n      peg$c834 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c835 = function() { return 'DOUBLE'; },\n      peg$c836 = function() { return 'DATE'; },\n      peg$c837 = \"datetime\",\n      peg$c838 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c839 = function() { return 'DATETIME'; },\n      peg$c840 = \"time\",\n      peg$c841 = peg$literalExpectation(\"TIME\", true),\n      peg$c842 = function() { return 'TIME'; },\n      peg$c843 = \"timestamp\",\n      peg$c844 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c845 = function() { return 'TIMESTAMP'; },\n      peg$c846 = \"truncate\",\n      peg$c847 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c848 = function() { return 'TRUNCATE'; },\n      peg$c849 = \"user\",\n      peg$c850 = peg$literalExpectation(\"USER\", true),\n      peg$c851 = function() { return 'USER'; },\n      peg$c852 = \"uuid\",\n      peg$c853 = peg$literalExpectation(\"UUID\", true),\n      peg$c854 = function() { return 'UUID'; },\n      peg$c855 = \"array\",\n      peg$c856 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c857 = function() { return 'ARRAY'; },\n      peg$c858 = \"map\",\n      peg$c859 = peg$literalExpectation(\"MAP\", true),\n      peg$c860 = function() { return 'MAP'; },\n      peg$c861 = \"multiset\",\n      peg$c862 = peg$literalExpectation(\"MULTISET\", true),\n      peg$c863 = function() { return 'MULTISET'; },\n      peg$c864 = function() { return 'ROW'; },\n      peg$c865 = \"current_date\",\n      peg$c866 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c867 = function() { return 'CURRENT_DATE'; },\n      peg$c868 = \"adddate\",\n      peg$c869 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c870 = function() { return 'ADDDATE'; },\n      peg$c871 = \"interval\",\n      peg$c872 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c873 = function() { return 'INTERVAL'; },\n      peg$c874 = function() { return 'YEAR'; },\n      peg$c875 = function() { return 'MONTH'; },\n      peg$c876 = function() { return 'DAY'; },\n      peg$c877 = function() { return 'HOUR'; },\n      peg$c878 = function() { return 'MINUTE'; },\n      peg$c879 = function() { return 'SECOND'; },\n      peg$c880 = \"current_time\",\n      peg$c881 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c882 = function() { return 'CURRENT_TIME'; },\n      peg$c883 = \"current_timestamp\",\n      peg$c884 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c885 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c886 = \"current_user\",\n      peg$c887 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c888 = function() { return 'CURRENT_USER'; },\n      peg$c889 = \"session_user\",\n      peg$c890 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c891 = function() { return 'SESSION_USER'; },\n      peg$c892 = \"system_user\",\n      peg$c893 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c894 = function() { return 'SYSTEM_USER'; },\n      peg$c895 = \"global\",\n      peg$c896 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c897 = function() { return 'GLOBAL'; },\n      peg$c898 = \"session\",\n      peg$c899 = peg$literalExpectation(\"SESSION\", true),\n      peg$c900 = function() { return 'SESSION'; },\n      peg$c901 = \"local\",\n      peg$c902 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c903 = function() { return 'LOCAL'; },\n      peg$c904 = \"persist\",\n      peg$c905 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c906 = function() { return 'PERSIST'; },\n      peg$c907 = \"persist_only\",\n      peg$c908 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c909 = function() { return 'PERSIST_ONLY'; },\n      peg$c910 = \"@\",\n      peg$c911 = peg$literalExpectation(\"@\", false),\n      peg$c912 = \"@@\",\n      peg$c913 = peg$literalExpectation(\"@@\", false),\n      peg$c914 = \"return\",\n      peg$c915 = peg$literalExpectation(\"return\", true),\n      peg$c916 = \":=\",\n      peg$c917 = peg$literalExpectation(\":=\", false),\n      peg$c918 = \"::\",\n      peg$c919 = peg$literalExpectation(\"::\", false),\n      peg$c920 = \"dual\",\n      peg$c921 = peg$literalExpectation(\"DUAL\", true),\n      peg$c922 = \"add\",\n      peg$c923 = peg$literalExpectation(\"ADD\", true),\n      peg$c924 = function() { return 'ADD'; },\n      peg$c925 = \"column\",\n      peg$c926 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c927 = function() { return 'COLUMN'; },\n      peg$c928 = \"index\",\n      peg$c929 = peg$literalExpectation(\"INDEX\", true),\n      peg$c930 = function() { return 'INDEX'; },\n      peg$c931 = function() { return 'KEY'; },\n      peg$c932 = \"fulltext\",\n      peg$c933 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c934 = function() { return 'FULLTEXT'; },\n      peg$c935 = \"spatial\",\n      peg$c936 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c937 = function() { return 'SPATIAL'; },\n      peg$c938 = function() { return 'UNIQUE'; },\n      peg$c939 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c940 = \"comment\",\n      peg$c941 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c942 = function() { return 'COMMENT'; },\n      peg$c943 = \"constraint\",\n      peg$c944 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c945 = function() { return 'CONSTRAINT'; },\n      peg$c946 = \"concurrently\",\n      peg$c947 = peg$literalExpectation(\"CONCURRENTLY\", true),\n      peg$c948 = function() { return 'CONCURRENTLY'; },\n      peg$c949 = \"references\",\n      peg$c950 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c951 = function() { return 'REFERENCES'; },\n      peg$c952 = \"sql_calc_found_rows\",\n      peg$c953 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c954 = \"sql_cache\",\n      peg$c955 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c956 = \"sql_no_cache\",\n      peg$c957 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c958 = \"sql_small_result\",\n      peg$c959 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c960 = \"sql_big_result\",\n      peg$c961 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c962 = \"sql_buffer_result\",\n      peg$c963 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c964 = \",\",\n      peg$c965 = peg$literalExpectation(\",\", false),\n      peg$c966 = \"[\",\n      peg$c967 = peg$literalExpectation(\"[\", false),\n      peg$c968 = \"]\",\n      peg$c969 = peg$literalExpectation(\"]\", false),\n      peg$c970 = \";\",\n      peg$c971 = peg$literalExpectation(\";\", false),\n      peg$c972 = \"->\",\n      peg$c973 = peg$literalExpectation(\"->\", false),\n      peg$c974 = \"->>\",\n      peg$c975 = peg$literalExpectation(\"->>\", false),\n      peg$c976 = \"#>\",\n      peg$c977 = peg$literalExpectation(\"#>\", false),\n      peg$c978 = \"#>>\",\n      peg$c979 = peg$literalExpectation(\"#>>\", false),\n      peg$c980 = \"||\",\n      peg$c981 = peg$literalExpectation(\"||\", false),\n      peg$c982 = \"&&\",\n      peg$c983 = peg$literalExpectation(\"&&\", false),\n      peg$c984 = \"/*\",\n      peg$c985 = peg$literalExpectation(\"/*\", false),\n      peg$c986 = \"*/\",\n      peg$c987 = peg$literalExpectation(\"*/\", false),\n      peg$c988 = \"--\",\n      peg$c989 = peg$literalExpectation(\"--\", false),\n      peg$c990 = \"#\",\n      peg$c991 = peg$literalExpectation(\"#\", false),\n      peg$c992 = function(k, s, c) {\n          // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c993 = peg$anyExpectation(),\n      peg$c994 = /^[ \\t\\n\\r]/,\n      peg$c995 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c996 = function() { varList = []; return true; },\n      peg$c997 = function(s) {\n            // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }\n            return { type: 'proc', stmt: s, vars: varList };\n          },\n      peg$c998 = function(va, s, e) {\n          // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c999 = function(e) {\n          // => { type: 'return'; expr: proc_expr; }\n            return { type: 'return', expr: e };\n          },\n      peg$c1000 = function(lt, op, rt, expr) {\n          // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1001 = function(e) {\n          // => proc_additive_expr & { parentheses: true; }\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1002 = function(dt, tail) {\n          // => string\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1003 = function(name, l) {\n          // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1004 = function(name) {\n          // => IGNORE\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1005 = function(head, tail) {\n          // => proc_primary[]\n            return createList(head, tail);\n          },\n      peg$c1006 = function(l) {\n          // => { type: 'array'; value: proc_primary_list }\n          return { type: 'array', value: l };\n        },\n      peg$c1007 = function(p, d) {\n          // => without_prefix_var_decl & { type: 'var'; prefix: string; };\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1008 = function(name, m) {\n          // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1009 = function(l) {\n          // => ident_name[];\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1010 = function(t) { /* => data_type */ return { dataType: t }},\n      peg$c1011 = function(t, l) {\n          // => data_type\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1012 = function(t) { /* =>  data_type */ return { dataType: t }; },\n      peg$c1013 = function(t) { /* =>  data_type */  return { dataType: t }; },\n      peg$c1014 = function(t) { return {dataType: t }; },\n      peg$c1015 = function(un, ze) {\n          // => any[];\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1016 = function(t, l, r, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; },\n      peg$c1017 = function(t, l, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; },\n      peg$c1018 = function(t, s) { /* =>  data_type */ return { dataType: t, suffix: s }; },\n      peg$c1019 = function(t, l) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c1020 = function(t) {/* =>  data_type */  return { dataType: t }; },\n      peg$c1021 = function(t) { /* =>  data_type */ return { dataType: t }},\n      peg$c1022 = function(t) {/* =>  data_type */  return { dataType: t }},\n      peg$c1023 = function(t, subt) { return { dataType: t, subType: subt}; },\n      peg$c1024 = function(t, subk, subv) { return {dataType: t, subType: subv}; },\n      peg$c1025 = function(t) { return {dataType: t} },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_table_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_trigger();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_extension_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_index_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecreate_db_stmt();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_UNION();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseKW_ALL();\n            if (s7 === peg$FAILED) {\n              s7 = null;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseselect_stmt();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_UNION();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseKW_ALL();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseselect_stmt();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c3) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c5();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_extension_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c6) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c7); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_WITH();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c8) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parseident_name();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseliteral_string();\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$currPos;\n                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {\n                              s14 = input.substr(peg$currPos, 7);\n                              peg$currPos += 7;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parse__();\n                              if (s15 !== peg$FAILED) {\n                                s16 = peg$parseident_name();\n                                if (s16 === peg$FAILED) {\n                                  s16 = peg$parseliteral_string();\n                                }\n                                if (s16 !== peg$FAILED) {\n                                  s14 = [s14, s15, s16];\n                                  s13 = s14;\n                                } else {\n                                  peg$currPos = s13;\n                                  s13 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s13;\n                                s13 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s13;\n                              s13 = peg$FAILED;\n                            }\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$currPos;\n                                s16 = peg$parseKW_FROM();\n                                if (s16 !== peg$FAILED) {\n                                  s17 = peg$parse__();\n                                  if (s17 !== peg$FAILED) {\n                                    s18 = peg$parseident_name();\n                                    if (s18 === peg$FAILED) {\n                                      s18 = peg$parseliteral_string();\n                                    }\n                                    if (s18 !== peg$FAILED) {\n                                      s16 = [s16, s17, s18];\n                                      s15 = s16;\n                                    } else {\n                                      peg$currPos = s15;\n                                      s15 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c12(s1, s3, s5, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c14(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c15(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONCURRENTLY();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_ON();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseindex_type();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseLPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsecolumn_order_list();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseRPAREN();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$currPos;\n                                                    s26 = peg$parseKW_TABLESPACE();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseident_name();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s26 = [s26, s27, s28];\n                                                          s25 = s26;\n                                                        } else {\n                                                          peg$currPos = s25;\n                                                          s25 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s25;\n                                                        s25 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s25;\n                                                      s25 = peg$FAILED;\n                                                    }\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parsewhere_clause();\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c17(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecollate_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c19) {\n                      s10 = input.substr(peg$currPos, 5);\n                      peg$currPos += 5;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c21) {\n                          s12 = input.substr(peg$currPos, 5);\n                          peg$currPos += 5;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c23) {\n                            s12 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                          }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c25(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c28(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_constraint();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c29) {\n                  s7 = input.substr(peg$currPos, 14);\n                  peg$currPos += 14;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$currPos;\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c33) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {\n                            s12 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s10 = [s10, s11, s12];\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsekeyword_comment();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecollate_expr();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecolumn_format();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsestorage();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsereference_definition();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c37(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_constraint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedefault_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_not_null();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_null();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c41) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c43) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c45) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c50) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c52) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c54) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c55); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c59(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c60(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c61(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c62(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c63(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_RENAME_TABLE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_ALGORITHM();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_LOCK();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c64(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c65(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c66(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c67(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c68) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c69); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c70) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c71); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c73); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c74) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c75); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c76(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c80); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c81) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c82); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c83) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c86(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c87(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c89) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c91(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c92(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c93) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c94); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c95(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c96) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c97); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c98) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c99); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c100) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c102(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c105) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c106); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c107) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c108); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse___();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c109(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c110) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c111); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c112) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c113); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c114) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c115); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c116) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c117); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c118) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c119); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c120(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_trigger() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c121) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c122); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c123) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c125) {\n                        s9 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                      }\n                      if (s9 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c127) {\n                          s9 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c128); }\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetrigger_event_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n                              s13 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_name();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$currPos;\n                                    s18 = peg$parseKW_FROM();\n                                    if (s18 !== peg$FAILED) {\n                                      s19 = peg$parse__();\n                                      if (s19 !== peg$FAILED) {\n                                        s20 = peg$parsetable_name();\n                                        if (s20 !== peg$FAILED) {\n                                          s18 = [s18, s19, s20];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsetrigger_deferrable();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsetrigger_for_row();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsetrigger_when();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c129) {\n                                                      s25 = input.substr(peg$currPos, 7);\n                                                      peg$currPos += 7;\n                                                    } else {\n                                                      s25 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c130); }\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c131) {\n                                                          s27 = input.substr(peg$currPos, 9);\n                                                          peg$currPos += 9;\n                                                        } else {\n                                                          s27 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parseproc_func_call();\n                                                            if (s29 !== peg$FAILED) {\n                                                              peg$savedPos = s0;\n                                                              s1 = peg$c133(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);\n                                                              s0 = s1;\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DELETE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TRUNCATE();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c134(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UPDATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c135) {\n            s4 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c136); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref_list();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c137(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrigger_event();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetrigger_event();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetrigger_event();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c138(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_deferrable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c141) {\n          s4 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c142); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 19).toLowerCase() === peg$c143) {\n          s3 = input.substr(peg$currPos, 19);\n          peg$currPos += 19;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c144); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c145) {\n            s3 = input.substr(peg$currPos, 18);\n            peg$currPos += 18;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c147(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_for_row() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c149); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c150) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {\n              s5 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c153); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c154) {\n                s5 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c155); }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c156(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_when() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c157(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c158(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c159) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c161) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c162); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c163();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c164) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c165); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c167); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c168(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c29) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c169) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c170); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c171) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c173) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c174); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c175) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c176); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c177) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c178); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c179(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c180) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c181); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c182(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c183) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c184); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c185;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c186); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c80); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c185;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c186); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c191(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c192) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c193); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c194(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c195(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c196(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c197(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_mode() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c200) {\n          s3 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c201); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c203); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c204) {\n              s3 = input.substr(peg$currPos, 13);\n              peg$currPos += 13;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c205); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 22).toLowerCase() === peg$c206) {\n                s3 = input.substr(peg$currPos, 22);\n                peg$currPos += 22;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c207); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 19).toLowerCase() === peg$c208) {\n                  s3 = input.substr(peg$currPos, 19);\n                  peg$currPos += 19;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c83) {\n                    s3 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c210) {\n                      s3 = input.substr(peg$currPos, 16);\n                      peg$currPos += 16;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c211); }\n                    }\n                    if (s3 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c212) {\n                        s3 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c213); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c214) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c215); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c216(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselock_mode();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c217) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c219(s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c220(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c221;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c222); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c223;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c224); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c225(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c226(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c227(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c228(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c229(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_DISTINCT();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsewhere_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsegroup_by_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsehaving_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parseorder_by_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parselimit_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c230(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22);\n                                                s0 = s1;\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c232(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c233(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c234(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebinary_column_expr();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseexpr();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c235(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSTAR();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c236(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsebinary_column_expr();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseexpr();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c237(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c238(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c239(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c240(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c241(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c242(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c243) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c244); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c245) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c246); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c247) {\n              s3 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c248); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c249) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c250); }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c251(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c252(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c253(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c254(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c255(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c256) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c257); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c258) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c259); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c260(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c261) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c262); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c263) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c265(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsekeyword_comment();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c266(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c267(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c268(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c269(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c270(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c271(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c272();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c273(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsealias_clause();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c274(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c275();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c276();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c277();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$parseKW_INNER();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseKW_JOIN();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c278();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c279(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c280(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c281(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c282(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c284(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c285(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c283(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c286(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c287(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c288(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ALL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_OFFSET();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhere_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c290(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c291(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c292(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c293;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c294); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c295(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c293;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c294); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c296(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturning_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURNING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecolumn_ref_list();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c297(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c298(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c299(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsereturning_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c300(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsereturning_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c301(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c302();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c303();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c304(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c305(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c306(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c307(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c308(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTERVAL();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c309(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsecase_when_then();\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecase_else();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_END();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_CASE();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c310(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c311(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c312(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunion_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c313(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c314(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_OR();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseLOGIC_OPERATOR();\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c315(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c316(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c318;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c319); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c293;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c294); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c320(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c321(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c322(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c323(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsejsonb_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c324(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c325) {\n      s0 = peg$c325;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c327;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c328); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c329) {\n          s0 = peg$c329;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c330); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c331) {\n            s0 = peg$c331;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c332); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c333;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c334); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c293;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c294); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c335) {\n                  s0 = peg$c335;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c336); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c337(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_IS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_DISTINCT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseKW_FROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetable_name();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c338(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseKW_IS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_NOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseadditive_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c339(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c340(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c341(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c342(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c343(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c345(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c346(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejsonb_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c347) {\n      s1 = peg$c347;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c349) {\n        s1 = peg$c349;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c350); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPERATOR_CONCATENATION();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseDOUBLE_WELL_ARROW();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWELL_ARROW();\n            if (s1 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s1 = peg$c351;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c352); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c353) {\n                  s1 = peg$c353;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c354); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c355) {\n                    s1 = peg$c355;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c356); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c357) {\n                      s1 = peg$c357;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_list_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c359(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c360;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c361); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c362;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c363); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c364(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c365;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c367;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c368); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c369;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c370); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c371(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsevar_decl();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parse__();\n                        if (s1 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 36) {\n                            s2 = peg$c372;\n                            peg$currPos++;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c373); }\n                          }\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseliteral_numeric();\n                            if (s3 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c374(s2, s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c375(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parseDOUBLE_ARROW();\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseSINGLE_ARROW();\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseliteral_string();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s7 = [s7, s8, s9];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$currPos;\n                  s7 = peg$parseDOUBLE_ARROW();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseSINGLE_ARROW();\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseliteral_string();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseliteral_numeric();\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s7 = [s7, s8, s9];\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c376(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDOT();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsecolumn();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c377(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecolumn();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c378(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c229(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c379(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c380(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c380(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c381(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c382(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c384;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c386.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c387); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c386.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c387); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c384;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c385); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c185;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c389.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c390); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c389.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c390); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c185;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c391;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c393.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c394); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c393.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c394); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c391;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c392); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c379(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c395(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c396(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c397(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c398.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c400.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c402.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c404;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c405); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c406(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_expr();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AGGR_FUNC();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_DISTINCT();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c407(s1, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AGGR_FUNC_NO_ARG();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c408(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_LISTAGG();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseadditive_expr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$currPos;\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseCOMMA();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse__();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseliteral_string();\n                        if (s10 !== peg$FAILED) {\n                          s7 = [s7, s8, s9, s10];\n                          s6 = s7;\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                  if (s6 === peg$FAILED) {\n                    s6 = null;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseRPAREN();\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c409(s1, s5, s6);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AGGR_FUNC() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_COLLECT();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AGGR_FUNC_NO_ARG() {\n    var s0;\n\n    s0 = peg$parseKW_RANK();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_DENSE_RANK();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_ROW_NUMBER();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c410(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c411(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c412) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c413); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_PARTITION();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_BY();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_clause();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseorder_by_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c414(s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseon_update_current_timestamp();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c415(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c416(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c417(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c418(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c365;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c419();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrim_position() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c420) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c422) {\n        s0 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c423); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c424) {\n          s0 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c425); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_rem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrim_position();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_FROM();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c426(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_func_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c427) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c428); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetrim_rem();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c429(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsetrim_func_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c430(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c431(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseextract_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsescalar_func();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseon_update_current_timestamp();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c432(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c433) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c435) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c437) {\n          s0 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c438); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c439) {\n            s0 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c440); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c442); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c443) {\n                s0 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c444); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c445) {\n                  s0 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c446); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c447) {\n                    s0 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c448); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c449) {\n                      s0 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c450); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c451) {\n                        s0 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c452); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c453) {\n                          s0 = input.substr(peg$currPos, 12);\n                          peg$currPos += 12;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c454); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c455) {\n                            s0 = input.substr(peg$currPos, 10);\n                            peg$currPos += 10;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c456); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c457) {\n                              s0 = input.substr(peg$currPos, 12);\n                              peg$currPos += 12;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c458); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c459) {\n                                s0 = input.substr(peg$currPos, 6);\n                                peg$currPos += 6;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c460); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n                                  s0 = input.substr(peg$currPos, 5);\n                                  peg$currPos += 5;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c462); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c463) {\n                                    s0 = input.substr(peg$currPos, 7);\n                                    peg$currPos += 7;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c464); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c465) {\n                                      s0 = input.substr(peg$currPos, 6);\n                                      peg$currPos += 6;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c467) {\n                                        s0 = input.substr(peg$currPos, 8);\n                                        peg$currPos += 8;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c468); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c469) {\n                                          s0 = input.substr(peg$currPos, 13);\n                                          peg$currPos += 13;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c470); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 15).toLowerCase() === peg$c471) {\n                                            s0 = input.substr(peg$currPos, 15);\n                                            peg$currPos += 15;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c472); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c473) {\n                                              s0 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s0 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c474); }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                              s0 = peg$currPos;\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c475) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c476); }\n                                              }\n                                              if (s1 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c477();\n                                              }\n                                              s0 = s1;\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c478(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_CURRENT_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_USER();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_SESSION_USER();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseKW_SYSTEM_USER();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseaggr_func();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsefunc_call();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecase_expr();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseinterval_expr();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parsecolumn_ref();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseparam();\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c479(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsedata_type();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseRPAREN();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c480(s5, s9);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseRPAREN();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseRPAREN();\n                                        if (s17 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c481(s5, s13);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseKW_DECIMAL();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseLPAREN();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseint();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parse__();\n                                    if (s14 !== peg$FAILED) {\n                                      s15 = peg$parseCOMMA();\n                                      if (s15 !== peg$FAILED) {\n                                        s16 = peg$parse__();\n                                        if (s16 !== peg$FAILED) {\n                                          s17 = peg$parseint();\n                                          if (s17 !== peg$FAILED) {\n                                            s18 = peg$parse__();\n                                            if (s18 !== peg$FAILED) {\n                                              s19 = peg$parseRPAREN();\n                                              if (s19 !== peg$FAILED) {\n                                                s20 = peg$parse__();\n                                                if (s20 !== peg$FAILED) {\n                                                  s21 = peg$parseRPAREN();\n                                                  if (s21 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c482(s5, s13, s17);\n                                                    s0 = s1;\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_CAST();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseexpr();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseKW_AS();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parsesignedness();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$parse__();\n                              if (s10 !== peg$FAILED) {\n                                s11 = peg$parseKW_INTEGER();\n                                if (s11 === peg$FAILED) {\n                                  s11 = null;\n                                }\n                                if (s11 !== peg$FAILED) {\n                                  s12 = peg$parse__();\n                                  if (s12 !== peg$FAILED) {\n                                    s13 = peg$parseRPAREN();\n                                    if (s13 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c483(s5, s9, s11);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c485();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c486();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c487();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c185;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c185;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c489(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c384;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c385); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c384;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c385); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseDOT();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c490(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c185;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c185;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c186); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c491(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c384;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c385); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c384;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c385); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c492(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c493.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c494); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c495.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c497) {\n      s1 = peg$c497;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c499();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c500) {\n        s1 = peg$c500;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c501); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c503) {\n          s1 = peg$c503;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c504); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c505();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c506) {\n            s1 = peg$c506;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c507); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c508();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c509) {\n              s1 = peg$c509;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c510); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c511();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c512) {\n                s1 = peg$c512;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c513); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c514();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c515) {\n                  s1 = peg$c515;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c516); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c517();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c518) {\n                    s1 = peg$c518;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c520();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c521) {\n                      s1 = peg$c521;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c523();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c524) {\n                        s1 = peg$c524;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c525); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c526(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c527;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c528); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c529();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c530.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c532(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c533(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c534(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c535(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c536(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c362;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c363); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c360;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c361); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c537(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c362;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c363); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c360;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c361); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c538(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c539;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c541(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c543(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c544.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c545); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c546.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c548.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c550.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c551); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c552(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c553) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c554); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c47) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c557) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c559) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c560); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c563) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c564); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c565) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c566); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c567();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c568) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c569); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c570) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c107) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c574) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c575); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c576) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c577); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c105) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c580) {\n      s1 = peg$c580;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c581); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURNING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c584) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c586();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c587) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c589) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c590); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c598) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c599); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c161) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c78); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLESPACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c608) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c619) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c620); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c625) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c626); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c627) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c631) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c633) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c256) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c637) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c639) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c641) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c642); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c643) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c645) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c646); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c647();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c650();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c651) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c652); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c653();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c656();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c657) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c658); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c659();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c662();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c199); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c663();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c664) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c665); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c666();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c667) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c668); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c669();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c670) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c671); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c672();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c673();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c674) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c675); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c676();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c677) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c678); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c679();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c680) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c681); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c682();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c683) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c684); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c685();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c688();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c689) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c691();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c692) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c693); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c694();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c695) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c696); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c697();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RANK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c700();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DENSE_RANK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c701) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c702); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c703();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LISTAGG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c706();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROW_NUMBER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c707) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c708); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c709();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c712();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c713) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c714); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c715();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c716) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c717); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c718();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c719) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c720); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c721();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_START() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c722) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c723); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c724();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c727();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c728) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c729); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c730();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_ROWTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 15);\n      peg$currPos += 15;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TUMBLE_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 15);\n      peg$currPos += 15;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HOP_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_PROCTIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c746) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c747); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c748();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c751();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c752) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c753); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c754) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c755); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c756) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c757); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c760) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c761); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c762) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c763); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c764) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c765); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c766();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOLEAN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c769();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c797) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c798); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c799();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c802();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSONB() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c803) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c804); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c805();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOMETRY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c808();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c809) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c810); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c811();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c812) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c813); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c814();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c815) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c816); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c817();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c818) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c819); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c820();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c821) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c822); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c823();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c824) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c825); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c826();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c827) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c828); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c829();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c830) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c831); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c832();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c833) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c834); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c835();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c836();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c837) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c838); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c840) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c841); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c843) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c844); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c845();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c846) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c847); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c848();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c849) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c850); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c851();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UUID() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c852) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c853); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c854();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c855) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c856); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c857();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c858) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c859); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c860();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MULTISET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c861) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c862); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c863();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c153); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c864();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c865) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c866); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c867();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c868) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c869); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c870();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c871) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c872); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c873();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c874();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c875();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c877();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c459) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c460); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c878();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c465) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c880) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c881); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c883) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c884); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c886) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c887); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c888();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c889) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c890); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c892) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c894();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c895) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c896); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c897();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c910;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c912) {\n      s0 = peg$c912;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c913); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c372;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c373); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c914) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c915); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c916) {\n      s0 = peg$c916;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c917); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE_COLON() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c918) {\n      s0 = peg$c918;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c919); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c293;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c294); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c920) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c921); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c922) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c923); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c924();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c925) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c927();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c928) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c929); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c930();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c931();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c932) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c933); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c934();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c935) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c936); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c937();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c938();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c171) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c939();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c940) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c941); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c942();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c943) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c944); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c945();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONCURRENTLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c946) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c947); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c952) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c954) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c955); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c956) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c957); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c958) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c959); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c960) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c961); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c962) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c963); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c539;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c964;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c965); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c365;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c221;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c223;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c224); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c966;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c967); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c968;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c969); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLEBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c333;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLEBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c327;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c970;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c971); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSINGLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c972) {\n      s0 = peg$c972;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c973); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c974) {\n      s0 = peg$c974;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c975); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c976) {\n      s0 = peg$c976;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c977); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_WELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c978) {\n      s0 = peg$c978;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c979); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c980) {\n      s0 = peg$c980;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c981); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c982) {\n      s0 = peg$c982;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c983); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c984) {\n      s1 = peg$c984;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c985); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c986) {\n        s5 = peg$c986;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c987); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c986) {\n          s5 = peg$c986;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c987); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c986) {\n          s3 = peg$c986;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c987); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c988) {\n      s1 = peg$c988;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c989); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c990;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c991); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c992(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c993); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c994.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c995); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c530.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c531); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c530.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c531); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c993); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c996();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c997(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c998(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c999(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c317(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1000(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1001(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1002(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1003(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1004(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1005(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1006(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1007(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1008(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c539;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c539;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c540); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1009(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsecharacter_string_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumeric_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsejson_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsegeometry_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsetext_type();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseuuid_type();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseboolean_type();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecollection_type();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsekey_value_type();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parserow_type();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseboolean_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BOOL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOLEAN();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1010(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CHAR();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_VARCHAR();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c544.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c545); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c544.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c545); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1011(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CHAR();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1012(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VARCHAR();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1013(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_STRING();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1014(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1015(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DECIMAL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_INT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_SMALLINT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_TINYINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_BIGINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_FLOAT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_DOUBLE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c544.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c545); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c544.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c545); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    if (peg$c544.test(input.charAt(peg$currPos))) {\n                      s11 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c545); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        if (peg$c544.test(input.charAt(peg$currPos))) {\n                          s11 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c545); }\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s8 = [s8, s9, s10];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumeric_type_suffix();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1016(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_NUMERIC();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DECIMAL();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INTEGER();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_SMALLINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_TINYINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_BIGINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_FLOAT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_DOUBLE();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c544.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c545); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c544.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c545); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsenumeric_type_suffix();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1017(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NUMERIC();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DECIMAL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_INTEGER();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_SMALLINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_TINYINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_BIGINT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_FLOAT();\n                      if (s1 === peg$FAILED) {\n                        s1 = peg$parseKW_DOUBLE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumeric_type_suffix();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1018(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c544.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c545); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c544.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c545); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1019(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1013(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_JSON();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_JSONB();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1013(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsegeometry_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GEOMETRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1020(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TINYTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MEDIUMTEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_LONGTEXT();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1021(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseuuid_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UUID();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1022(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecollection_type() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLANGLEBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRANGLEBRAKE();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1023(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekey_value_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_MAP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLANGLEBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCOMMA();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRANGLEBRAKE();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1024(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserow_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROW();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1025(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'INTERVAL': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n\n      'NOT': true,\n      'NULL': true,\n      'NULLS': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'STATUS': true, // reserved (MySQL)\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    function commonStrToLiteral(strOrLiteral) {\n      return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, prefix, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, tablesample, table_hint } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  if (table_hint) result.push(`${toUpper(table_hint.keyword)}`, `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr.view)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fulltextSearchToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  fulltext_search : fulltextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type, toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fulltextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fulltextSearchToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  exec     : execToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (!global && window) window.global = window\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}